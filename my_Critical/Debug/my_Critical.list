
my_Critical.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005244  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c8  080053c8  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080053c8  080053c8  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080053c8  080053c8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c8  080053c8  000063c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053cc  080053cc  000063cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080053d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a90  20000010  080053e0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001aa0  080053e0  00007aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d72  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d5  00000000  00000000  0001cdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00020380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd3  00000000  00000000  000217f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196a6  00000000  00000000  000227c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017385  00000000  00000000  0003be69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094442  00000000  00000000  000531ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000549c  00000000  00000000  000e7674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000ecb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800533c 	.word	0x0800533c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800533c 	.word	0x0800533c

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b10      	ldr	r3, [pc, #64]	@ (8000198 <MX_DMA_Init+0x48>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a0f      	ldr	r2, [pc, #60]	@ (8000198 <MX_DMA_Init+0x48>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b0d      	ldr	r3, [pc, #52]	@ (8000198 <MX_DMA_Init+0x48>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	2010      	movs	r0, #16
 8000174:	f000 fba7 	bl	80008c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000178:	2010      	movs	r0, #16
 800017a:	f000 fbc0 	bl	80008fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	2011      	movs	r0, #17
 8000184:	f000 fb9f 	bl	80008c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000188:	2011      	movs	r0, #17
 800018a:	f000 fbb8 	bl	80008fe <HAL_NVIC_EnableIRQ>

}
 800018e:	bf00      	nop
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40021000 	.word	0x40021000

0800019c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	xQueue = xQueueCreate(5,sizeof(MyData));
 80001a0:	2200      	movs	r2, #0
 80001a2:	2108      	movs	r1, #8
 80001a4:	2005      	movs	r0, #5
 80001a6:	f002 fe04 	bl	8002db2 <xQueueGenericCreate>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a05      	ldr	r2, [pc, #20]	@ (80001c4 <MX_FREERTOS_Init+0x28>)
 80001ae:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001b0:	4a05      	ldr	r2, [pc, #20]	@ (80001c8 <MX_FREERTOS_Init+0x2c>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	4805      	ldr	r0, [pc, #20]	@ (80001cc <MX_FREERTOS_Init+0x30>)
 80001b6:	f002 fb85 	bl	80028c4 <osThreadNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a04      	ldr	r2, [pc, #16]	@ (80001d0 <MX_FREERTOS_Init+0x34>)
 80001be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001c0:	bf00      	nop
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	2000002c 	.word	0x2000002c
 80001c8:	08005378 	.word	0x08005378
 80001cc:	080001d5 	.word	0x080001d5
 80001d0:	20000030 	.word	0x20000030

080001d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001dc:	2001      	movs	r0, #1
 80001de:	f002 fc03 	bl	80029e8 <osDelay>
 80001e2:	e7fb      	b.n	80001dc <StartDefaultTask+0x8>

080001e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <MX_GPIO_Init+0x40>)
 80001ec:	699b      	ldr	r3, [r3, #24]
 80001ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000224 <MX_GPIO_Init+0x40>)
 80001f0:	f043 0320 	orr.w	r3, r3, #32
 80001f4:	6193      	str	r3, [r2, #24]
 80001f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <MX_GPIO_Init+0x40>)
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	f003 0320 	and.w	r3, r3, #32
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000202:	4b08      	ldr	r3, [pc, #32]	@ (8000224 <MX_GPIO_Init+0x40>)
 8000204:	699b      	ldr	r3, [r3, #24]
 8000206:	4a07      	ldr	r2, [pc, #28]	@ (8000224 <MX_GPIO_Init+0x40>)
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	6193      	str	r3, [r2, #24]
 800020e:	4b05      	ldr	r3, [pc, #20]	@ (8000224 <MX_GPIO_Init+0x40>)
 8000210:	699b      	ldr	r3, [r3, #24]
 8000212:	f003 0304 	and.w	r3, r3, #4
 8000216:	603b      	str	r3, [r7, #0]
 8000218:	683b      	ldr	r3, [r7, #0]

}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	40021000 	.word	0x40021000

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022c:	f000 fa64 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000230:	f000 f80e 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000234:	f7ff ffd6 	bl	80001e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000238:	f7ff ff8a 	bl	8000150 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800023c:	f000 f964 	bl	8000508 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000240:	f002 faf8 	bl	8002834 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000244:	f7ff ffaa 	bl	800019c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000248:	f002 fb16 	bl	8002878 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024c:	bf00      	nop
 800024e:	e7fd      	b.n	800024c <main+0x24>

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	@ 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	@ 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f005 f832 	bl	80052c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fed7 	bl	800104c <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a4:	f000 f82c 	bl	8000300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 f944 	bl	8001550 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ce:	f000 f817 	bl	8000300 <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	@ 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a04      	ldr	r2, [pc, #16]	@ (80002fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d101      	bne.n	80002f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80002ee:	f000 fa19 	bl	8000724 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40000800 	.word	0x40000800

08000300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
}
 8000306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000308:	bf00      	nop
 800030a:	e7fd      	b.n	8000308 <Error_Handler+0x8>

0800030c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000312:	4b18      	ldr	r3, [pc, #96]	@ (8000374 <HAL_MspInit+0x68>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a17      	ldr	r2, [pc, #92]	@ (8000374 <HAL_MspInit+0x68>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <HAL_MspInit+0x68>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032a:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <HAL_MspInit+0x68>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	4a11      	ldr	r2, [pc, #68]	@ (8000374 <HAL_MspInit+0x68>)
 8000330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000334:	61d3      	str	r3, [r2, #28]
 8000336:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <HAL_MspInit+0x68>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	210f      	movs	r1, #15
 8000346:	f06f 0001 	mvn.w	r0, #1
 800034a:	f000 fabc 	bl	80008c6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800034e:	4b0a      	ldr	r3, [pc, #40]	@ (8000378 <HAL_MspInit+0x6c>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <HAL_MspInit+0x6c>)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036a:	bf00      	nop
 800036c:	3710      	adds	r7, #16
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000
 8000378:	40010000 	.word	0x40010000

0800037c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08e      	sub	sp, #56	@ 0x38
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000384:	2300      	movs	r3, #0
 8000386:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000388:	2300      	movs	r3, #0
 800038a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800038c:	2300      	movs	r3, #0
 800038e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000392:	4b34      	ldr	r3, [pc, #208]	@ (8000464 <HAL_InitTick+0xe8>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	4a33      	ldr	r2, [pc, #204]	@ (8000464 <HAL_InitTick+0xe8>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	61d3      	str	r3, [r2, #28]
 800039e:	4b31      	ldr	r3, [pc, #196]	@ (8000464 <HAL_InitTick+0xe8>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	f003 0304 	and.w	r3, r3, #4
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003aa:	f107 0210 	add.w	r2, r7, #16
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4611      	mov	r1, r2
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fa3b 	bl	8001830 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003ba:	6a3b      	ldr	r3, [r7, #32]
 80003bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d103      	bne.n	80003cc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003c4:	f001 fa0c 	bl	80017e0 <HAL_RCC_GetPCLK1Freq>
 80003c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80003ca:	e004      	b.n	80003d6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80003cc:	f001 fa08 	bl	80017e0 <HAL_RCC_GetPCLK1Freq>
 80003d0:	4603      	mov	r3, r0
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003d8:	4a23      	ldr	r2, [pc, #140]	@ (8000468 <HAL_InitTick+0xec>)
 80003da:	fba2 2303 	umull	r2, r3, r2, r3
 80003de:	0c9b      	lsrs	r3, r3, #18
 80003e0:	3b01      	subs	r3, #1
 80003e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80003e4:	4b21      	ldr	r3, [pc, #132]	@ (800046c <HAL_InitTick+0xf0>)
 80003e6:	4a22      	ldr	r2, [pc, #136]	@ (8000470 <HAL_InitTick+0xf4>)
 80003e8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80003ea:	4b20      	ldr	r3, [pc, #128]	@ (800046c <HAL_InitTick+0xf0>)
 80003ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003f0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80003f2:	4a1e      	ldr	r2, [pc, #120]	@ (800046c <HAL_InitTick+0xf0>)
 80003f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003f6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <HAL_InitTick+0xf0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <HAL_InitTick+0xf0>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b19      	ldr	r3, [pc, #100]	@ (800046c <HAL_InitTick+0xf0>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800040a:	4818      	ldr	r0, [pc, #96]	@ (800046c <HAL_InitTick+0xf0>)
 800040c:	f001 fa5e 	bl	80018cc <HAL_TIM_Base_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000416:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800041a:	2b00      	cmp	r3, #0
 800041c:	d11b      	bne.n	8000456 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800041e:	4813      	ldr	r0, [pc, #76]	@ (800046c <HAL_InitTick+0xf0>)
 8000420:	f001 faac 	bl	800197c <HAL_TIM_Base_Start_IT>
 8000424:	4603      	mov	r3, r0
 8000426:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800042a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800042e:	2b00      	cmp	r3, #0
 8000430:	d111      	bne.n	8000456 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000432:	201e      	movs	r0, #30
 8000434:	f000 fa63 	bl	80008fe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b0f      	cmp	r3, #15
 800043c:	d808      	bhi.n	8000450 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800043e:	2200      	movs	r2, #0
 8000440:	6879      	ldr	r1, [r7, #4]
 8000442:	201e      	movs	r0, #30
 8000444:	f000 fa3f 	bl	80008c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000448:	4a0a      	ldr	r2, [pc, #40]	@ (8000474 <HAL_InitTick+0xf8>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6013      	str	r3, [r2, #0]
 800044e:	e002      	b.n	8000456 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000450:	2301      	movs	r3, #1
 8000452:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000456:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800045a:	4618      	mov	r0, r3
 800045c:	3738      	adds	r7, #56	@ 0x38
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	431bde83 	.word	0x431bde83
 800046c:	20000034 	.word	0x20000034
 8000470:	40000800 	.word	0x40000800
 8000474:	20000004 	.word	0x20000004

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <NMI_Handler+0x4>

08000480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <MemManage_Handler+0x4>

08000490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <UsageFault_Handler+0x4>

080004a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80004b0:	4802      	ldr	r0, [pc, #8]	@ (80004bc <DMA1_Channel6_IRQHandler+0x10>)
 80004b2:	f000 fb41 	bl	8000b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200000c4 	.word	0x200000c4

080004c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80004c4:	4802      	ldr	r0, [pc, #8]	@ (80004d0 <DMA1_Channel7_IRQHandler+0x10>)
 80004c6:	f000 fb37 	bl	8000b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000108 	.word	0x20000108

080004d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80004d8:	4802      	ldr	r0, [pc, #8]	@ (80004e4 <TIM4_IRQHandler+0x10>)
 80004da:	f001 faa1 	bl	8001a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000034 	.word	0x20000034

080004e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004ec:	4802      	ldr	r0, [pc, #8]	@ (80004f8 <USART2_IRQHandler+0x10>)
 80004ee:	f001 fc7b 	bl	8001de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2000007c 	.word	0x2000007c

080004fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 800050e:	4a12      	ldr	r2, [pc, #72]	@ (8000558 <MX_USART2_UART_Init+0x50>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000514:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_USART2_UART_Init+0x4c>)
 8000540:	f001 fc02 	bl	8001d48 <HAL_UART_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800054a:	f7ff fed9 	bl	8000300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000007c 	.word	0x2000007c
 8000558:	40004400 	.word	0x40004400

0800055c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a46      	ldr	r2, [pc, #280]	@ (8000690 <HAL_UART_MspInit+0x134>)
 8000578:	4293      	cmp	r3, r2
 800057a:	f040 8084 	bne.w	8000686 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800057e:	4b45      	ldr	r3, [pc, #276]	@ (8000694 <HAL_UART_MspInit+0x138>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a44      	ldr	r2, [pc, #272]	@ (8000694 <HAL_UART_MspInit+0x138>)
 8000584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b42      	ldr	r3, [pc, #264]	@ (8000694 <HAL_UART_MspInit+0x138>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b3f      	ldr	r3, [pc, #252]	@ (8000694 <HAL_UART_MspInit+0x138>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a3e      	ldr	r2, [pc, #248]	@ (8000694 <HAL_UART_MspInit+0x138>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000694 <HAL_UART_MspInit+0x138>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005ae:	2304      	movs	r3, #4
 80005b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	4835      	ldr	r0, [pc, #212]	@ (8000698 <HAL_UART_MspInit+0x13c>)
 80005c2:	f000 fbbf 	bl	8000d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005c6:	2308      	movs	r3, #8
 80005c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	482f      	ldr	r0, [pc, #188]	@ (8000698 <HAL_UART_MspInit+0x13c>)
 80005da:	f000 fbb3 	bl	8000d44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80005de:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <HAL_UART_MspInit+0x140>)
 80005e0:	4a2f      	ldr	r2, [pc, #188]	@ (80006a0 <HAL_UART_MspInit+0x144>)
 80005e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e4:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <HAL_UART_MspInit+0x140>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <HAL_UART_MspInit+0x140>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <HAL_UART_MspInit+0x140>)
 80005f2:	2280      	movs	r2, #128	@ 0x80
 80005f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <HAL_UART_MspInit+0x140>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005fc:	4b27      	ldr	r3, [pc, #156]	@ (800069c <HAL_UART_MspInit+0x140>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000602:	4b26      	ldr	r3, [pc, #152]	@ (800069c <HAL_UART_MspInit+0x140>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000608:	4b24      	ldr	r3, [pc, #144]	@ (800069c <HAL_UART_MspInit+0x140>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800060e:	4823      	ldr	r0, [pc, #140]	@ (800069c <HAL_UART_MspInit+0x140>)
 8000610:	f000 f984 	bl	800091c <HAL_DMA_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800061a:	f7ff fe71 	bl	8000300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a1e      	ldr	r2, [pc, #120]	@ (800069c <HAL_UART_MspInit+0x140>)
 8000622:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000624:	4a1d      	ldr	r2, [pc, #116]	@ (800069c <HAL_UART_MspInit+0x140>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800062a:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 800062c:	4a1e      	ldr	r2, [pc, #120]	@ (80006a8 <HAL_UART_MspInit+0x14c>)
 800062e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 8000632:	2210      	movs	r2, #16
 8000634:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000648:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800065a:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 800065c:	f000 f95e 	bl	800091c <HAL_DMA_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000666:	f7ff fe4b 	bl	8000300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 800066e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000670:	4a0c      	ldr	r2, [pc, #48]	@ (80006a4 <HAL_UART_MspInit+0x148>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2105      	movs	r1, #5
 800067a:	2026      	movs	r0, #38	@ 0x26
 800067c:	f000 f923 	bl	80008c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000680:	2026      	movs	r0, #38	@ 0x26
 8000682:	f000 f93c 	bl	80008fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000686:	bf00      	nop
 8000688:	3720      	adds	r7, #32
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40004400 	.word	0x40004400
 8000694:	40021000 	.word	0x40021000
 8000698:	40010800 	.word	0x40010800
 800069c:	200000c4 	.word	0x200000c4
 80006a0:	4002006c 	.word	0x4002006c
 80006a4:	20000108 	.word	0x20000108
 80006a8:	40020080 	.word	0x40020080

080006ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ac:	f7ff ff26 	bl	80004fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006b2:	490c      	ldr	r1, [pc, #48]	@ (80006e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006b4:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a09      	ldr	r2, [pc, #36]	@ (80006ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006c8:	4c09      	ldr	r4, [pc, #36]	@ (80006f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006d6:	f004 fdff 	bl	80052d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006da:	f7ff fda5 	bl	8000228 <main>
  bx lr
 80006de:	4770      	bx	lr
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006e8:	080053d0 	.word	0x080053d0
  ldr r2, =_sbss
 80006ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006f0:	20001aa0 	.word	0x20001aa0

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <HAL_Init+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a07      	ldr	r2, [pc, #28]	@ (8000720 <HAL_Init+0x28>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f8d1 	bl	80008b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	200f      	movs	r0, #15
 8000710:	f7ff fe34 	bl	800037c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fdfa 	bl	800030c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <HAL_IncTick+0x1c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <HAL_IncTick+0x20>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4413      	add	r3, r2
 8000734:	4a03      	ldr	r2, [pc, #12]	@ (8000744 <HAL_IncTick+0x20>)
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	20000008 	.word	0x20000008
 8000744:	2000014c 	.word	0x2000014c

08000748 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b02      	ldr	r3, [pc, #8]	@ (8000758 <HAL_GetTick+0x10>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	2000014c 	.word	0x2000014c

0800075c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800076c:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800078c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078e:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	60d3      	str	r3, [r2, #12]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a8:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <__NVIC_GetPriorityGrouping+0x18>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	0a1b      	lsrs	r3, r3, #8
 80007ae:	f003 0307 	and.w	r3, r3, #7
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db0b      	blt.n	80007ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	f003 021f 	and.w	r2, r3, #31
 80007d8:	4906      	ldr	r1, [pc, #24]	@ (80007f4 <__NVIC_EnableIRQ+0x34>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	2001      	movs	r0, #1
 80007e2:	fa00 f202 	lsl.w	r2, r0, r2
 80007e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	e000e100 	.word	0xe000e100

080007f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	@ (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	@ (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	@ 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	@ 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff4f 	bl	800075c <__NVIC_SetPriorityGrouping>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
 80008d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d8:	f7ff ff64 	bl	80007a4 <__NVIC_GetPriorityGrouping>
 80008dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ffb2 	bl	800084c <NVIC_EncodePriority>
 80008e8:	4602      	mov	r2, r0
 80008ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff81 	bl	80007f8 <__NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff57 	bl	80007c0 <__NVIC_EnableIRQ>
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e043      	b.n	80009ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <HAL_DMA_Init+0xa8>)
 800093a:	4413      	add	r3, r2
 800093c:	4a22      	ldr	r2, [pc, #136]	@ (80009c8 <HAL_DMA_Init+0xac>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	009a      	lsls	r2, r3, #2
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <HAL_DMA_Init+0xb0>)
 800094e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2202      	movs	r2, #2
 8000954:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000966:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800096a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800098c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4313      	orrs	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	bffdfff8 	.word	0xbffdfff8
 80009c8:	cccccccd 	.word	0xcccccccd
 80009cc:	40020000 	.word	0x40020000

080009d0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d008      	beq.n	80009fa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2204      	movs	r2, #4
 80009ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e020      	b.n	8000a3c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 020e 	bic.w	r2, r2, #14
 8000a08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0201 	bic.w	r2, r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a22:	2101      	movs	r1, #1
 8000a24:	fa01 f202 	lsl.w	r2, r1, r2
 8000a28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
	...

08000a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d005      	beq.n	8000a6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2204      	movs	r2, #4
 8000a64:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e051      	b.n	8000b10 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 020e 	bic.w	r2, r2, #14
 8000a7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 0201 	bic.w	r2, r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a22      	ldr	r2, [pc, #136]	@ (8000b1c <HAL_DMA_Abort_IT+0xd4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d029      	beq.n	8000aea <HAL_DMA_Abort_IT+0xa2>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <HAL_DMA_Abort_IT+0xd8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d022      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x9e>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <HAL_DMA_Abort_IT+0xdc>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d01a      	beq.n	8000ae0 <HAL_DMA_Abort_IT+0x98>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1e      	ldr	r2, [pc, #120]	@ (8000b28 <HAL_DMA_Abort_IT+0xe0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d012      	beq.n	8000ada <HAL_DMA_Abort_IT+0x92>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <HAL_DMA_Abort_IT+0xe4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00a      	beq.n	8000ad4 <HAL_DMA_Abort_IT+0x8c>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <HAL_DMA_Abort_IT+0xe8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d102      	bne.n	8000ace <HAL_DMA_Abort_IT+0x86>
 8000ac8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000acc:	e00e      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ace:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ad2:	e00b      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ad4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad8:	e008      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ade:	e005      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae4:	e002      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ae6:	2310      	movs	r3, #16
 8000ae8:	e000      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000aea:	2301      	movs	r3, #1
 8000aec:	4a11      	ldr	r2, [pc, #68]	@ (8000b34 <HAL_DMA_Abort_IT+0xec>)
 8000aee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	4798      	blx	r3
    } 
  }
  return status;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40020008 	.word	0x40020008
 8000b20:	4002001c 	.word	0x4002001c
 8000b24:	40020030 	.word	0x40020030
 8000b28:	40020044 	.word	0x40020044
 8000b2c:	40020058 	.word	0x40020058
 8000b30:	4002006c 	.word	0x4002006c
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	2204      	movs	r2, #4
 8000b56:	409a      	lsls	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d04f      	beq.n	8000c00 <HAL_DMA_IRQHandler+0xc8>
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d04a      	beq.n	8000c00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d107      	bne.n	8000b88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0204 	bic.w	r2, r2, #4
 8000b86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a66      	ldr	r2, [pc, #408]	@ (8000d28 <HAL_DMA_IRQHandler+0x1f0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d029      	beq.n	8000be6 <HAL_DMA_IRQHandler+0xae>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a65      	ldr	r2, [pc, #404]	@ (8000d2c <HAL_DMA_IRQHandler+0x1f4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d022      	beq.n	8000be2 <HAL_DMA_IRQHandler+0xaa>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a63      	ldr	r2, [pc, #396]	@ (8000d30 <HAL_DMA_IRQHandler+0x1f8>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d01a      	beq.n	8000bdc <HAL_DMA_IRQHandler+0xa4>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a62      	ldr	r2, [pc, #392]	@ (8000d34 <HAL_DMA_IRQHandler+0x1fc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d012      	beq.n	8000bd6 <HAL_DMA_IRQHandler+0x9e>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a60      	ldr	r2, [pc, #384]	@ (8000d38 <HAL_DMA_IRQHandler+0x200>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d00a      	beq.n	8000bd0 <HAL_DMA_IRQHandler+0x98>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8000d3c <HAL_DMA_IRQHandler+0x204>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d102      	bne.n	8000bca <HAL_DMA_IRQHandler+0x92>
 8000bc4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bc8:	e00e      	b.n	8000be8 <HAL_DMA_IRQHandler+0xb0>
 8000bca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000bce:	e00b      	b.n	8000be8 <HAL_DMA_IRQHandler+0xb0>
 8000bd0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000bd4:	e008      	b.n	8000be8 <HAL_DMA_IRQHandler+0xb0>
 8000bd6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bda:	e005      	b.n	8000be8 <HAL_DMA_IRQHandler+0xb0>
 8000bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be0:	e002      	b.n	8000be8 <HAL_DMA_IRQHandler+0xb0>
 8000be2:	2340      	movs	r3, #64	@ 0x40
 8000be4:	e000      	b.n	8000be8 <HAL_DMA_IRQHandler+0xb0>
 8000be6:	2304      	movs	r3, #4
 8000be8:	4a55      	ldr	r2, [pc, #340]	@ (8000d40 <HAL_DMA_IRQHandler+0x208>)
 8000bea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f000 8094 	beq.w	8000d1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000bfe:	e08e      	b.n	8000d1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	2202      	movs	r2, #2
 8000c06:	409a      	lsls	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d056      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x186>
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d051      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0320 	and.w	r3, r3, #32
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10b      	bne.n	8000c40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 020a 	bic.w	r2, r2, #10
 8000c36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a38      	ldr	r2, [pc, #224]	@ (8000d28 <HAL_DMA_IRQHandler+0x1f0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d029      	beq.n	8000c9e <HAL_DMA_IRQHandler+0x166>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a37      	ldr	r2, [pc, #220]	@ (8000d2c <HAL_DMA_IRQHandler+0x1f4>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d022      	beq.n	8000c9a <HAL_DMA_IRQHandler+0x162>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a35      	ldr	r2, [pc, #212]	@ (8000d30 <HAL_DMA_IRQHandler+0x1f8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d01a      	beq.n	8000c94 <HAL_DMA_IRQHandler+0x15c>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a34      	ldr	r2, [pc, #208]	@ (8000d34 <HAL_DMA_IRQHandler+0x1fc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d012      	beq.n	8000c8e <HAL_DMA_IRQHandler+0x156>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a32      	ldr	r2, [pc, #200]	@ (8000d38 <HAL_DMA_IRQHandler+0x200>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d00a      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x150>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a31      	ldr	r2, [pc, #196]	@ (8000d3c <HAL_DMA_IRQHandler+0x204>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d102      	bne.n	8000c82 <HAL_DMA_IRQHandler+0x14a>
 8000c7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000c80:	e00e      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x168>
 8000c82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c86:	e00b      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x168>
 8000c88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c8c:	e008      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x168>
 8000c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c92:	e005      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x168>
 8000c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c98:	e002      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x168>
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	e000      	b.n	8000ca0 <HAL_DMA_IRQHandler+0x168>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	4a27      	ldr	r2, [pc, #156]	@ (8000d40 <HAL_DMA_IRQHandler+0x208>)
 8000ca2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d034      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000cbc:	e02f      	b.n	8000d1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d028      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x1e8>
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d023      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 020e 	bic.w	r2, r2, #14
 8000ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	4798      	blx	r3
    }
  }
  return;
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
}
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40020008 	.word	0x40020008
 8000d2c:	4002001c 	.word	0x4002001c
 8000d30:	40020030 	.word	0x40020030
 8000d34:	40020044 	.word	0x40020044
 8000d38:	40020058 	.word	0x40020058
 8000d3c:	4002006c 	.word	0x4002006c
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b08b      	sub	sp, #44	@ 0x2c
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	e169      	b.n	800102c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f040 8158 	bne.w	8001026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	4a9a      	ldr	r2, [pc, #616]	@ (8000fe4 <HAL_GPIO_Init+0x2a0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d05e      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000d80:	4a98      	ldr	r2, [pc, #608]	@ (8000fe4 <HAL_GPIO_Init+0x2a0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d875      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000d86:	4a98      	ldr	r2, [pc, #608]	@ (8000fe8 <HAL_GPIO_Init+0x2a4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d058      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000d8c:	4a96      	ldr	r2, [pc, #600]	@ (8000fe8 <HAL_GPIO_Init+0x2a4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d86f      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000d92:	4a96      	ldr	r2, [pc, #600]	@ (8000fec <HAL_GPIO_Init+0x2a8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d052      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000d98:	4a94      	ldr	r2, [pc, #592]	@ (8000fec <HAL_GPIO_Init+0x2a8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d869      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000d9e:	4a94      	ldr	r2, [pc, #592]	@ (8000ff0 <HAL_GPIO_Init+0x2ac>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d04c      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000da4:	4a92      	ldr	r2, [pc, #584]	@ (8000ff0 <HAL_GPIO_Init+0x2ac>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d863      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000daa:	4a92      	ldr	r2, [pc, #584]	@ (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d046      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
 8000db0:	4a90      	ldr	r2, [pc, #576]	@ (8000ff4 <HAL_GPIO_Init+0x2b0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d85d      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000db6:	2b12      	cmp	r3, #18
 8000db8:	d82a      	bhi.n	8000e10 <HAL_GPIO_Init+0xcc>
 8000dba:	2b12      	cmp	r3, #18
 8000dbc:	d859      	bhi.n	8000e72 <HAL_GPIO_Init+0x12e>
 8000dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc4 <HAL_GPIO_Init+0x80>)
 8000dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc4:	08000e3f 	.word	0x08000e3f
 8000dc8:	08000e19 	.word	0x08000e19
 8000dcc:	08000e2b 	.word	0x08000e2b
 8000dd0:	08000e6d 	.word	0x08000e6d
 8000dd4:	08000e73 	.word	0x08000e73
 8000dd8:	08000e73 	.word	0x08000e73
 8000ddc:	08000e73 	.word	0x08000e73
 8000de0:	08000e73 	.word	0x08000e73
 8000de4:	08000e73 	.word	0x08000e73
 8000de8:	08000e73 	.word	0x08000e73
 8000dec:	08000e73 	.word	0x08000e73
 8000df0:	08000e73 	.word	0x08000e73
 8000df4:	08000e73 	.word	0x08000e73
 8000df8:	08000e73 	.word	0x08000e73
 8000dfc:	08000e73 	.word	0x08000e73
 8000e00:	08000e73 	.word	0x08000e73
 8000e04:	08000e73 	.word	0x08000e73
 8000e08:	08000e21 	.word	0x08000e21
 8000e0c:	08000e35 	.word	0x08000e35
 8000e10:	4a79      	ldr	r2, [pc, #484]	@ (8000ff8 <HAL_GPIO_Init+0x2b4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e16:	e02c      	b.n	8000e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e029      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	3304      	adds	r3, #4
 8000e26:	623b      	str	r3, [r7, #32]
          break;
 8000e28:	e024      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	623b      	str	r3, [r7, #32]
          break;
 8000e32:	e01f      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	330c      	adds	r3, #12
 8000e3a:	623b      	str	r3, [r7, #32]
          break;
 8000e3c:	e01a      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e46:	2304      	movs	r3, #4
 8000e48:	623b      	str	r3, [r7, #32]
          break;
 8000e4a:	e013      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d105      	bne.n	8000e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e54:	2308      	movs	r3, #8
 8000e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	611a      	str	r2, [r3, #16]
          break;
 8000e5e:	e009      	b.n	8000e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e60:	2308      	movs	r3, #8
 8000e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	615a      	str	r2, [r3, #20]
          break;
 8000e6a:	e003      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
          break;
 8000e70:	e000      	b.n	8000e74 <HAL_GPIO_Init+0x130>
          break;
 8000e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	2bff      	cmp	r3, #255	@ 0xff
 8000e78:	d801      	bhi.n	8000e7e <HAL_GPIO_Init+0x13a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	e001      	b.n	8000e82 <HAL_GPIO_Init+0x13e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3304      	adds	r3, #4
 8000e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	2bff      	cmp	r3, #255	@ 0xff
 8000e88:	d802      	bhi.n	8000e90 <HAL_GPIO_Init+0x14c>
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x152>
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	3b08      	subs	r3, #8
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	6a39      	ldr	r1, [r7, #32]
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 80b1 	beq.w	8001026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ffc <HAL_GPIO_Init+0x2b8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000edc:	4a48      	ldr	r2, [pc, #288]	@ (8001000 <HAL_GPIO_Init+0x2bc>)
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a40      	ldr	r2, [pc, #256]	@ (8001004 <HAL_GPIO_Init+0x2c0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d013      	beq.n	8000f30 <HAL_GPIO_Init+0x1ec>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001008 <HAL_GPIO_Init+0x2c4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d00d      	beq.n	8000f2c <HAL_GPIO_Init+0x1e8>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3e      	ldr	r2, [pc, #248]	@ (800100c <HAL_GPIO_Init+0x2c8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x1e4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8001010 <HAL_GPIO_Init+0x2cc>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d101      	bne.n	8000f24 <HAL_GPIO_Init+0x1e0>
 8000f20:	2303      	movs	r3, #3
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f24:	2304      	movs	r3, #4
 8000f26:	e004      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_Init+0x1ee>
 8000f30:	2300      	movs	r3, #0
 8000f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f42:	492f      	ldr	r1, [pc, #188]	@ (8001000 <HAL_GPIO_Init+0x2bc>)
 8000f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	492c      	ldr	r1, [pc, #176]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4928      	ldr	r1, [pc, #160]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f84:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	4922      	ldr	r1, [pc, #136]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	60cb      	str	r3, [r1, #12]
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	491e      	ldr	r1, [pc, #120]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4918      	ldr	r1, [pc, #96]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	4914      	ldr	r1, [pc, #80]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d021      	beq.n	8001018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	490e      	ldr	r1, [pc, #56]	@ (8001014 <HAL_GPIO_Init+0x2d0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e021      	b.n	8001026 <HAL_GPIO_Init+0x2e2>
 8000fe2:	bf00      	nop
 8000fe4:	10320000 	.word	0x10320000
 8000fe8:	10310000 	.word	0x10310000
 8000fec:	10220000 	.word	0x10220000
 8000ff0:	10210000 	.word	0x10210000
 8000ff4:	10120000 	.word	0x10120000
 8000ff8:	10110000 	.word	0x10110000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00
 800100c:	40011000 	.word	0x40011000
 8001010:	40011400 	.word	0x40011400
 8001014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_GPIO_Init+0x304>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	43db      	mvns	r3, r3
 8001020:	4909      	ldr	r1, [pc, #36]	@ (8001048 <HAL_GPIO_Init+0x304>)
 8001022:	4013      	ands	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	3301      	adds	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	f47f ae8e 	bne.w	8000d58 <HAL_GPIO_Init+0x14>
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	372c      	adds	r7, #44	@ 0x2c
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	40010400 	.word	0x40010400

0800104c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e272      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8087 	beq.w	800117a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800106c:	4b92      	ldr	r3, [pc, #584]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b04      	cmp	r3, #4
 8001076:	d00c      	beq.n	8001092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001078:	4b8f      	ldr	r3, [pc, #572]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b08      	cmp	r3, #8
 8001082:	d112      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
 8001084:	4b8c      	ldr	r3, [pc, #560]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001090:	d10b      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001092:	4b89      	ldr	r3, [pc, #548]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06c      	beq.n	8001178 <HAL_RCC_OscConfig+0x12c>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d168      	bne.n	8001178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e24c      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b2:	d106      	bne.n	80010c2 <HAL_RCC_OscConfig+0x76>
 80010b4:	4b80      	ldr	r3, [pc, #512]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a7f      	ldr	r2, [pc, #508]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e02e      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x98>
 80010ca:	4b7b      	ldr	r3, [pc, #492]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a7a      	ldr	r2, [pc, #488]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b78      	ldr	r3, [pc, #480]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a77      	ldr	r2, [pc, #476]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0xbc>
 80010ee:	4b72      	ldr	r3, [pc, #456]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a71      	ldr	r2, [pc, #452]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6f      	ldr	r3, [pc, #444]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6e      	ldr	r2, [pc, #440]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 8001108:	4b6b      	ldr	r3, [pc, #428]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a6a      	ldr	r2, [pc, #424]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b68      	ldr	r3, [pc, #416]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a67      	ldr	r2, [pc, #412]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fb0e 	bl	8000748 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fb0a 	bl	8000748 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	@ 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e200      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xe4>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fafa 	bl	8000748 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff faf6 	bl	8000748 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	@ 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1ec      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b53      	ldr	r3, [pc, #332]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x10c>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001186:	4b4c      	ldr	r3, [pc, #304]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001192:	4b49      	ldr	r3, [pc, #292]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x18c>
 800119e:	4b46      	ldr	r3, [pc, #280]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b43      	ldr	r3, [pc, #268]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1c0      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3d      	ldr	r3, [pc, #244]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4939      	ldr	r1, [pc, #228]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <HAL_RCC_OscConfig+0x270>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff faaf 	bl	8000748 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff faab 	bl	8000748 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1a1      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4927      	ldr	r1, [pc, #156]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <HAL_RCC_OscConfig+0x270>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fa8e 	bl	8000748 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fa8a 	bl	8000748 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e180      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d03a      	beq.n	80012d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d019      	beq.n	8001296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fa6e 	bl	8000748 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fa6a 	bl	8000748 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e160      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f000 fafe 	bl	8001890 <RCC_Delay>
 8001294:	e01c      	b.n	80012d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fa54 	bl	8000748 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a2:	e00f      	b.n	80012c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fa50 	bl	8000748 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d908      	bls.n	80012c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e146      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	42420000 	.word	0x42420000
 80012c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	4b92      	ldr	r3, [pc, #584]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e9      	bne.n	80012a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a6 	beq.w	800142a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10d      	bne.n	800130a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b88      	ldr	r3, [pc, #544]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a87      	ldr	r2, [pc, #540]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b85      	ldr	r3, [pc, #532]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b82      	ldr	r3, [pc, #520]	@ (8001514 <HAL_RCC_OscConfig+0x4c8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d118      	bne.n	8001348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	4b7f      	ldr	r3, [pc, #508]	@ (8001514 <HAL_RCC_OscConfig+0x4c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7e      	ldr	r2, [pc, #504]	@ (8001514 <HAL_RCC_OscConfig+0x4c8>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001322:	f7ff fa11 	bl	8000748 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132a:	f7ff fa0d 	bl	8000748 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	@ 0x64
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e103      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	4b75      	ldr	r3, [pc, #468]	@ (8001514 <HAL_RCC_OscConfig+0x4c8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x312>
 8001350:	4b6f      	ldr	r3, [pc, #444]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a6e      	ldr	r2, [pc, #440]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	e02d      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x334>
 8001366:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a69      	ldr	r2, [pc, #420]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	4b67      	ldr	r3, [pc, #412]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a66      	ldr	r2, [pc, #408]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	e01c      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x356>
 8001388:	4b61      	ldr	r3, [pc, #388]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a60      	ldr	r2, [pc, #384]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	4b5e      	ldr	r3, [pc, #376]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a5d      	ldr	r2, [pc, #372]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 80013a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	4b58      	ldr	r3, [pc, #352]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a57      	ldr	r2, [pc, #348]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d015      	beq.n	80013ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff f9c1 	bl	8000748 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff f9bd 	bl	8000748 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0b1      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ee      	beq.n	80013ca <HAL_RCC_OscConfig+0x37e>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff f9ab 	bl	8000748 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff f9a7 	bl	8000748 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e09b      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	4b40      	ldr	r3, [pc, #256]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d105      	bne.n	800142a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141e:	4b3c      	ldr	r3, [pc, #240]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a3b      	ldr	r2, [pc, #236]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8087 	beq.w	8001542 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001434:	4b36      	ldr	r3, [pc, #216]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b08      	cmp	r3, #8
 800143e:	d061      	beq.n	8001504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d146      	bne.n	80014d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001448:	4b33      	ldr	r3, [pc, #204]	@ (8001518 <HAL_RCC_OscConfig+0x4cc>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff f97b 	bl	8000748 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff f977 	bl	8000748 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e06d      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001468:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800147c:	d108      	bne.n	8001490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800147e:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	4921      	ldr	r1, [pc, #132]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a19      	ldr	r1, [r3, #32]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a0:	430b      	orrs	r3, r1
 80014a2:	491b      	ldr	r1, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_RCC_OscConfig+0x4cc>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff f94b 	bl	8000748 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff f947 	bl	8000748 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e03d      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x46a>
 80014d4:	e035      	b.n	8001542 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_RCC_OscConfig+0x4cc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff f934 	bl	8000748 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff f930 	bl	8000748 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e026      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x498>
 8001502:	e01e      	b.n	8001542 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d107      	bne.n	800151c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e019      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
 8001510:	40021000 	.word	0x40021000
 8001514:	40007000 	.word	0x40007000
 8001518:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <HAL_RCC_OscConfig+0x500>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	429a      	cmp	r2, r3
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0d0      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b6a      	ldr	r3, [pc, #424]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d910      	bls.n	8001594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b67      	ldr	r3, [pc, #412]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 0207 	bic.w	r2, r3, #7
 800157a:	4965      	ldr	r1, [pc, #404]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a58      	ldr	r2, [pc, #352]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a52      	ldr	r2, [pc, #328]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d040      	beq.n	8001670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d115      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b41      	ldr	r3, [pc, #260]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e073      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3d      	ldr	r3, [pc, #244]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06b      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b39      	ldr	r3, [pc, #228]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4936      	ldr	r1, [pc, #216]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001640:	f7ff f882 	bl	8000748 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff f87e 	bl	8000748 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e053      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2d      	ldr	r3, [pc, #180]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d210      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 0207 	bic.w	r2, r3, #7
 8001686:	4922      	ldr	r1, [pc, #136]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ca:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4602      	mov	r2, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	490a      	ldr	r1, [pc, #40]	@ (8001718 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	5ccb      	ldrb	r3, [r1, r3]
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <HAL_RCC_ClockConfig+0x1cc>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x1d0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fe3c 	bl	800037c <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000
 8001714:	40021000 	.word	0x40021000
 8001718:	0800539c 	.word	0x0800539c
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800173e:	4b1e      	ldr	r3, [pc, #120]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b04      	cmp	r3, #4
 800174c:	d002      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x30>
 800174e:	2b08      	cmp	r3, #8
 8001750:	d003      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x36>
 8001752:	e027      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001756:	613b      	str	r3, [r7, #16]
      break;
 8001758:	e027      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	0c9b      	lsrs	r3, r3, #18
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	4a17      	ldr	r2, [pc, #92]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001764:	5cd3      	ldrb	r3, [r2, r3]
 8001766:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d010      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	0c5b      	lsrs	r3, r3, #17
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001786:	fb03 f202 	mul.w	r2, r3, r2
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e004      	b.n	800179e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	613b      	str	r3, [r7, #16]
      break;
 80017a2:	e002      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x98>)
 80017a6:	613b      	str	r3, [r7, #16]
      break;
 80017a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017aa:	693b      	ldr	r3, [r7, #16]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	007a1200 	.word	0x007a1200
 80017c0:	080053b4 	.word	0x080053b4
 80017c4:	080053c4 	.word	0x080053c4
 80017c8:	003d0900 	.word	0x003d0900

080017cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d0:	4b02      	ldr	r3, [pc, #8]	@ (80017dc <HAL_RCC_GetHCLKFreq+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000000 	.word	0x20000000

080017e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017e4:	f7ff fff2 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	4903      	ldr	r1, [pc, #12]	@ (8001804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	080053ac 	.word	0x080053ac

08001808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800180c:	f7ff ffde 	bl	80017cc <HAL_RCC_GetHCLKFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0adb      	lsrs	r3, r3, #11
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	4903      	ldr	r1, [pc, #12]	@ (800182c <HAL_RCC_GetPCLK2Freq+0x24>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	080053ac 	.word	0x080053ac

08001830 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	220f      	movs	r2, #15
 800183e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_RCC_GetClockConfig+0x58>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_RCC_GetClockConfig+0x58>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_RCC_GetClockConfig+0x58>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <HAL_RCC_GetClockConfig+0x58>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_RCC_GetClockConfig+0x5c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0207 	and.w	r2, r3, #7
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40021000 	.word	0x40021000
 800188c:	40022000 	.word	0x40022000

08001890 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <RCC_Delay+0x34>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <RCC_Delay+0x38>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0a5b      	lsrs	r3, r3, #9
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018ac:	bf00      	nop
  }
  while (Delay --);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1e5a      	subs	r2, r3, #1
 80018b2:	60fa      	str	r2, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f9      	bne.n	80018ac <RCC_Delay+0x1c>
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	20000000 	.word	0x20000000
 80018c8:	10624dd3 	.word	0x10624dd3

080018cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e041      	b.n	8001962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f839 	bl	800196a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f000 f99c 	bl	8001c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d001      	beq.n	8001994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e03a      	b.n	8001a0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a18      	ldr	r2, [pc, #96]	@ (8001a14 <HAL_TIM_Base_Start_IT+0x98>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00e      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x58>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019be:	d009      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x58>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a14      	ldr	r2, [pc, #80]	@ (8001a18 <HAL_TIM_Base_Start_IT+0x9c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_TIM_Base_Start_IT+0x58>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <HAL_TIM_Base_Start_IT+0xa0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d111      	bne.n	80019f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d010      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f6:	e007      	b.n	8001a08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40000800 	.word	0x40000800

08001a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d020      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01b      	beq.n	8001a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0202 	mvn.w	r2, #2
 8001a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f8d1 	bl	8001c12 <HAL_TIM_IC_CaptureCallback>
 8001a70:	e005      	b.n	8001a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8c4 	bl	8001c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f8d3 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d020      	beq.n	8001ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01b      	beq.n	8001ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f06f 0204 	mvn.w	r2, #4
 8001aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f8ab 	bl	8001c12 <HAL_TIM_IC_CaptureCallback>
 8001abc:	e005      	b.n	8001aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f89e 	bl	8001c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f8ad 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d020      	beq.n	8001b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01b      	beq.n	8001b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f06f 0208 	mvn.w	r2, #8
 8001aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2204      	movs	r2, #4
 8001af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f885 	bl	8001c12 <HAL_TIM_IC_CaptureCallback>
 8001b08:	e005      	b.n	8001b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f878 	bl	8001c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f887 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d020      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0210 	mvn.w	r2, #16
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f85f 	bl	8001c12 <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f852 	bl	8001c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f861 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f06f 0201 	mvn.w	r2, #1
 8001b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fba8 	bl	80002dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00c      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8c3 	bl	8001d36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f831 	bl	8001c36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00c      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0220 	mvn.w	r2, #32
 8001bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f896 	bl	8001d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d18 <TIM_Base_SetConfig+0xd0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d00b      	beq.n	8001c78 <TIM_Base_SetConfig+0x30>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c66:	d007      	beq.n	8001c78 <TIM_Base_SetConfig+0x30>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d1c <TIM_Base_SetConfig+0xd4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d003      	beq.n	8001c78 <TIM_Base_SetConfig+0x30>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a2b      	ldr	r2, [pc, #172]	@ (8001d20 <TIM_Base_SetConfig+0xd8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d108      	bne.n	8001c8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <TIM_Base_SetConfig+0xd0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00b      	beq.n	8001caa <TIM_Base_SetConfig+0x62>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c98:	d007      	beq.n	8001caa <TIM_Base_SetConfig+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d1c <TIM_Base_SetConfig+0xd4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d003      	beq.n	8001caa <TIM_Base_SetConfig+0x62>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d20 <TIM_Base_SetConfig+0xd8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d108      	bne.n	8001cbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a0d      	ldr	r2, [pc, #52]	@ (8001d18 <TIM_Base_SetConfig+0xd0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d103      	bne.n	8001cf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f023 0201 	bic.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40000400 	.word	0x40000400
 8001d20:	40000800 	.word	0x40000800

08001d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e042      	b.n	8001de0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7fe fbf4 	bl	800055c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2224      	movs	r2, #36	@ 0x24
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fc7f 	bl	8002690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b0ba      	sub	sp, #232	@ 0xe8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001e26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_UART_IRQHandler+0x66>
 8001e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fb63 	bl	8002512 <UART_Receive_IT>
      return;
 8001e4c:	e25b      	b.n	8002306 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80de 	beq.w	8002014 <HAL_UART_IRQHandler+0x22c>
 8001e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d106      	bne.n	8001e72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80d1 	beq.w	8002014 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_UART_IRQHandler+0xae>
 8001e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_UART_IRQHandler+0xd2>
 8001ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f043 0202 	orr.w	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_UART_IRQHandler+0xf6>
 8001ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f043 0204 	orr.w	r2, r3, #4
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d011      	beq.n	8001f0e <HAL_UART_IRQHandler+0x126>
 8001eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	f043 0208 	orr.w	r2, r3, #8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 81f2 	beq.w	80022fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_UART_IRQHandler+0x14e>
 8001f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 faee 	bl	8002512 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <HAL_UART_IRQHandler+0x17a>
 8001f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d04f      	beq.n	8002002 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f9f8 	bl	8002358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d041      	beq.n	8001ffa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3314      	adds	r3, #20
 8001f7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f84:	e853 3f00 	ldrex	r3, [r3]
 8001f88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	3314      	adds	r3, #20
 8001f9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001fa2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001faa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001fae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001fb2:	e841 2300 	strex	r3, r2, [r1]
 8001fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1d9      	bne.n	8001f76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d013      	beq.n	8001ff2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fce:	4a7e      	ldr	r2, [pc, #504]	@ (80021c8 <HAL_UART_IRQHandler+0x3e0>)
 8001fd0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fd36 	bl	8000a48 <HAL_DMA_Abort_IT>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fec:	4610      	mov	r0, r2
 8001fee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff0:	e00e      	b.n	8002010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f99c 	bl	8002330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff8:	e00a      	b.n	8002010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f998 	bl	8002330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002000:	e006      	b.n	8002010 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f994 	bl	8002330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800200e:	e175      	b.n	80022fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002010:	bf00      	nop
    return;
 8002012:	e173      	b.n	80022fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	2b01      	cmp	r3, #1
 800201a:	f040 814f 	bne.w	80022bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800201e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8148 	beq.w	80022bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800202c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8141 	beq.w	80022bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80b6 	beq.w	80021cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800206c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8145 	beq.w	8002300 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800207a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800207e:	429a      	cmp	r2, r3
 8002080:	f080 813e 	bcs.w	8002300 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800208a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b20      	cmp	r3, #32
 8002094:	f000 8088 	beq.w	80021a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020a6:	e853 3f00 	ldrex	r3, [r3]
 80020aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80020ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80020c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80020d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020d4:	e841 2300 	strex	r3, r2, [r1]
 80020d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80020dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1d9      	bne.n	8002098 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3314      	adds	r3, #20
 80020ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ee:	e853 3f00 	ldrex	r3, [r3]
 80020f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80020f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3314      	adds	r3, #20
 8002104:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002108:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800210c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800210e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002110:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002114:	e841 2300 	strex	r3, r2, [r1]
 8002118:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800211a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e1      	bne.n	80020e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3314      	adds	r3, #20
 8002126:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002128:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800212a:	e853 3f00 	ldrex	r3, [r3]
 800212e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002130:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002136:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3314      	adds	r3, #20
 8002140:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002144:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002146:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002148:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800214a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800214c:	e841 2300 	strex	r3, r2, [r1]
 8002150:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1e3      	bne.n	8002120 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	330c      	adds	r3, #12
 800216c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002170:	e853 3f00 	ldrex	r3, [r3]
 8002174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002178:	f023 0310 	bic.w	r3, r3, #16
 800217c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800218a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800218c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002192:	e841 2300 	strex	r3, r2, [r1]
 8002196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1e3      	bne.n	8002166 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe fc14 	bl	80009d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8bf 	bl	8002342 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021c4:	e09c      	b.n	8002300 <HAL_UART_IRQHandler+0x518>
 80021c6:	bf00      	nop
 80021c8:	0800241d 	.word	0x0800241d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 808e 	beq.w	8002304 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80021e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8089 	beq.w	8002304 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	330c      	adds	r3, #12
 80021f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fc:	e853 3f00 	ldrex	r3, [r3]
 8002200:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	330c      	adds	r3, #12
 8002212:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002216:	647a      	str	r2, [r7, #68]	@ 0x44
 8002218:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800221c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800221e:	e841 2300 	strex	r3, r2, [r1]
 8002222:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e3      	bne.n	80021f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3314      	adds	r3, #20
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	e853 3f00 	ldrex	r3, [r3]
 8002238:	623b      	str	r3, [r7, #32]
   return(result);
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3314      	adds	r3, #20
 800224a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800224e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002250:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e3      	bne.n	800222a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	330c      	adds	r3, #12
 8002276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	e853 3f00 	ldrex	r3, [r3]
 800227e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0310 	bic.w	r3, r3, #16
 8002286:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002294:	61fa      	str	r2, [r7, #28]
 8002296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002298:	69b9      	ldr	r1, [r7, #24]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	e841 2300 	strex	r3, r2, [r1]
 80022a0:	617b      	str	r3, [r7, #20]
   return(result);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e3      	bne.n	8002270 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022b2:	4619      	mov	r1, r3
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f844 	bl	8002342 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022ba:	e023      	b.n	8002304 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_UART_IRQHandler+0x4f4>
 80022c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f8b5 	bl	8002444 <UART_Transmit_IT>
    return;
 80022da:	e014      	b.n	8002306 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00e      	beq.n	8002306 <HAL_UART_IRQHandler+0x51e>
 80022e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f8f4 	bl	80024e2 <UART_EndTransmit_IT>
    return;
 80022fa:	e004      	b.n	8002306 <HAL_UART_IRQHandler+0x51e>
    return;
 80022fc:	bf00      	nop
 80022fe:	e002      	b.n	8002306 <HAL_UART_IRQHandler+0x51e>
      return;
 8002300:	bf00      	nop
 8002302:	e000      	b.n	8002306 <HAL_UART_IRQHandler+0x51e>
      return;
 8002304:	bf00      	nop
  }
}
 8002306:	37e8      	adds	r7, #232	@ 0xe8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002358:	b480      	push	{r7}
 800235a:	b095      	sub	sp, #84	@ 0x54
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	330c      	adds	r3, #12
 8002366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236a:	e853 3f00 	ldrex	r3, [r3]
 800236e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	330c      	adds	r3, #12
 800237e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002380:	643a      	str	r2, [r7, #64]	@ 0x40
 8002382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002388:	e841 2300 	strex	r3, r2, [r1]
 800238c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1e5      	bne.n	8002360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3314      	adds	r3, #20
 800239a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	e853 3f00 	ldrex	r3, [r3]
 80023a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3314      	adds	r3, #20
 80023b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023bc:	e841 2300 	strex	r3, r2, [r1]
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1e5      	bne.n	8002394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d119      	bne.n	8002404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	330c      	adds	r3, #12
 80023d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	e853 3f00 	ldrex	r3, [r3]
 80023de:	60bb      	str	r3, [r7, #8]
   return(result);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f023 0310 	bic.w	r3, r3, #16
 80023e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	330c      	adds	r3, #12
 80023ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023f0:	61ba      	str	r2, [r7, #24]
 80023f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	e841 2300 	strex	r3, r2, [r1]
 80023fc:	613b      	str	r3, [r7, #16]
   return(result);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002412:	bf00      	nop
 8002414:	3754      	adds	r7, #84	@ 0x54
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f7ff ff7a 	bl	8002330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b21      	cmp	r3, #33	@ 0x21
 8002456:	d13e      	bne.n	80024d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002460:	d114      	bne.n	800248c <UART_Transmit_IT+0x48>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d110      	bne.n	800248c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800247e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	1c9a      	adds	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]
 800248a:	e008      	b.n	800249e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	1c59      	adds	r1, r3, #1
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6211      	str	r1, [r2, #32]
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4619      	mov	r1, r3
 80024ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024d6:	2302      	movs	r3, #2
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff02 	bl	800230c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b08c      	sub	sp, #48	@ 0x30
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b22      	cmp	r3, #34	@ 0x22
 8002524:	f040 80ae 	bne.w	8002684 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002530:	d117      	bne.n	8002562 <UART_Receive_IT+0x50>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	b29a      	uxth	r2, r3
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	1c9a      	adds	r2, r3, #2
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002560:	e026      	b.n	80025b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002574:	d007      	beq.n	8002586 <UART_Receive_IT+0x74>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <UART_Receive_IT+0x82>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e008      	b.n	80025a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4619      	mov	r1, r3
 80025be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d15d      	bne.n	8002680 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0220 	bic.w	r2, r2, #32
 80025d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	2b01      	cmp	r3, #1
 8002608:	d135      	bne.n	8002676 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	330c      	adds	r3, #12
 8002616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	e853 3f00 	ldrex	r3, [r3]
 800261e:	613b      	str	r3, [r7, #16]
   return(result);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f023 0310 	bic.w	r3, r3, #16
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	330c      	adds	r3, #12
 800262e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002630:	623a      	str	r2, [r7, #32]
 8002632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002634:	69f9      	ldr	r1, [r7, #28]
 8002636:	6a3a      	ldr	r2, [r7, #32]
 8002638:	e841 2300 	strex	r3, r2, [r1]
 800263c:	61bb      	str	r3, [r7, #24]
   return(result);
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e5      	bne.n	8002610 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b10      	cmp	r3, #16
 8002650:	d10a      	bne.n	8002668 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800266c:	4619      	mov	r1, r3
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fe67 	bl	8002342 <HAL_UARTEx_RxEventCallback>
 8002674:	e002      	b.n	800267c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fe51 	bl	800231e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e002      	b.n	8002686 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e000      	b.n	8002686 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
  }
}
 8002686:	4618      	mov	r0, r3
 8002688:	3730      	adds	r7, #48	@ 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80026ca:	f023 030c 	bic.w	r3, r3, #12
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2c      	ldr	r2, [pc, #176]	@ (80027a4 <UART_SetConfig+0x114>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d103      	bne.n	8002700 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026f8:	f7ff f886 	bl	8001808 <HAL_RCC_GetPCLK2Freq>
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	e002      	b.n	8002706 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002700:	f7ff f86e 	bl	80017e0 <HAL_RCC_GetPCLK1Freq>
 8002704:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	009a      	lsls	r2, r3, #2
 8002710:	441a      	add	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	4a22      	ldr	r2, [pc, #136]	@ (80027a8 <UART_SetConfig+0x118>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	0119      	lsls	r1, r3, #4
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009a      	lsls	r2, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fbb2 f2f3 	udiv	r2, r2, r3
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <UART_SetConfig+0x118>)
 800273e:	fba3 0302 	umull	r0, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2064      	movs	r0, #100	@ 0x64
 8002746:	fb00 f303 	mul.w	r3, r0, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	3332      	adds	r3, #50	@ 0x32
 8002750:	4a15      	ldr	r2, [pc, #84]	@ (80027a8 <UART_SetConfig+0x118>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800275c:	4419      	add	r1, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009a      	lsls	r2, r3, #2
 8002768:	441a      	add	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fbb2 f2f3 	udiv	r2, r2, r3
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <UART_SetConfig+0x118>)
 8002776:	fba3 0302 	umull	r0, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2064      	movs	r0, #100	@ 0x64
 800277e:	fb00 f303 	mul.w	r3, r0, r3
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	3332      	adds	r3, #50	@ 0x32
 8002788:	4a07      	ldr	r2, [pc, #28]	@ (80027a8 <UART_SetConfig+0x118>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	440a      	add	r2, r1
 800279a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40013800 	.word	0x40013800
 80027a8:	51eb851f 	.word	0x51eb851f

080027ac <__NVIC_SetPriority>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	@ (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	@ (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <SysTick_Handler+0x1c>)
 8002806:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002808:	f001 fd48 	bl	800429c <xTaskGetSchedulerState>
 800280c:	4603      	mov	r3, r0
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002812:	f002 fae9 	bl	8004de8 <xPortSysTickHandler>
  }
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002824:	2100      	movs	r1, #0
 8002826:	f06f 0004 	mvn.w	r0, #4
 800282a:	f7ff ffbf 	bl	80027ac <__NVIC_SetPriority>
#endif
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800283a:	f3ef 8305 	mrs	r3, IPSR
 800283e:	603b      	str	r3, [r7, #0]
  return(result);
 8002840:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002846:	f06f 0305 	mvn.w	r3, #5
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	e00c      	b.n	8002868 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <osKernelInitialize+0x40>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d105      	bne.n	8002862 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002856:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <osKernelInitialize+0x40>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	e002      	b.n	8002868 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
 8002866:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	20000150 	.word	0x20000150

08002878 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800287e:	f3ef 8305 	mrs	r3, IPSR
 8002882:	603b      	str	r3, [r7, #0]
  return(result);
 8002884:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <osKernelStart+0x1a>
    stat = osErrorISR;
 800288a:	f06f 0305 	mvn.w	r3, #5
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	e010      	b.n	80028b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <osKernelStart+0x48>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d109      	bne.n	80028ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800289a:	f7ff ffc1 	bl	8002820 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800289e:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <osKernelStart+0x48>)
 80028a0:	2202      	movs	r2, #2
 80028a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028a4:	f001 f8ae 	bl	8003a04 <vTaskStartScheduler>
      stat = osOK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	e002      	b.n	80028b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000150 	.word	0x20000150

080028c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08e      	sub	sp, #56	@ 0x38
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028d4:	f3ef 8305 	mrs	r3, IPSR
 80028d8:	617b      	str	r3, [r7, #20]
  return(result);
 80028da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d17e      	bne.n	80029de <osThreadNew+0x11a>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d07b      	beq.n	80029de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80028ea:	2318      	movs	r3, #24
 80028ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d045      	beq.n	800298a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <osThreadNew+0x48>
        name = attr->name;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <osThreadNew+0x6e>
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b38      	cmp	r3, #56	@ 0x38
 8002924:	d805      	bhi.n	8002932 <osThreadNew+0x6e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <osThreadNew+0x72>
        return (NULL);
 8002932:	2300      	movs	r3, #0
 8002934:	e054      	b.n	80029e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00e      	beq.n	800296c <osThreadNew+0xa8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b5b      	cmp	r3, #91	@ 0x5b
 8002954:	d90a      	bls.n	800296c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <osThreadNew+0xa8>
        mem = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	e010      	b.n	800298e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10c      	bne.n	800298e <osThreadNew+0xca>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d108      	bne.n	800298e <osThreadNew+0xca>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <osThreadNew+0xca>
          mem = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	e001      	b.n	800298e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d110      	bne.n	80029b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800299c:	9202      	str	r2, [sp, #8]
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	6a3a      	ldr	r2, [r7, #32]
 80029a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fe4e 	bl	800364c <xTaskCreateStatic>
 80029b0:	4603      	mov	r3, r0
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	e013      	b.n	80029de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d110      	bne.n	80029de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fe9c 	bl	800370c <xTaskCreate>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <osThreadNew+0x11a>
            hTask = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80029de:	693b      	ldr	r3, [r7, #16]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3728      	adds	r7, #40	@ 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029f0:	f3ef 8305 	mrs	r3, IPSR
 80029f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80029f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <osDelay+0x1c>
    stat = osErrorISR;
 80029fc:	f06f 0305 	mvn.w	r3, #5
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e007      	b.n	8002a14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 ffc2 	bl	8003998 <vTaskDelay>
    }
  }

  return (stat);
 8002a14:	68fb      	ldr	r3, [r7, #12]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a06      	ldr	r2, [pc, #24]	@ (8002a48 <vApplicationGetIdleTaskMemory+0x28>)
 8002a30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <vApplicationGetIdleTaskMemory+0x2c>)
 8002a36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2280      	movs	r2, #128	@ 0x80
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	20000154 	.word	0x20000154
 8002a4c:	200001b0 	.word	0x200001b0

08002a50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <vApplicationGetTimerTaskMemory+0x2c>)
 8002a60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	4a06      	ldr	r2, [pc, #24]	@ (8002a80 <vApplicationGetTimerTaskMemory+0x30>)
 8002a66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a6e:	601a      	str	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	200003b0 	.word	0x200003b0
 8002a80:	2000040c 	.word	0x2000040c

08002a84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f103 0208 	add.w	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f103 0208 	add.w	r2, r3, #8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f103 0208 	add.w	r2, r3, #8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d103      	bne.n	8002b40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e00c      	b.n	8002b5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3308      	adds	r3, #8
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e002      	b.n	8002b4e <vListInsert+0x2e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d2f6      	bcs.n	8002b48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6892      	ldr	r2, [r2, #8]
 8002ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6852      	ldr	r2, [r2, #4]
 8002bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d103      	bne.n	8002bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
	...

08002be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c10:	f002 f86c 	bl	8004cec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	68f9      	ldr	r1, [r7, #12]
 8002c1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	441a      	add	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c40:	3b01      	subs	r3, #1
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	441a      	add	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	22ff      	movs	r2, #255	@ 0xff
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	22ff      	movs	r2, #255	@ 0xff
 8002c5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d114      	bne.n	8002c90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01a      	beq.n	8002ca4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3310      	adds	r3, #16
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 f952 	bl	8003f1c <xTaskRemoveFromEventList>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d012      	beq.n	8002ca4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <xQueueGenericReset+0xd0>)
 8002c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	e009      	b.n	8002ca4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3310      	adds	r3, #16
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fef5 	bl	8002a84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3324      	adds	r3, #36	@ 0x24
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fef0 	bl	8002a84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ca4:	f002 f852 	bl	8004d4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ca8:	2301      	movs	r3, #1
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	e000ed04 	.word	0xe000ed04

08002cb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08e      	sub	sp, #56	@ 0x38
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	e7fd      	b.n	8002cfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <xQueueGenericCreateStatic+0x56>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <xQueueGenericCreateStatic+0x5a>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <xQueueGenericCreateStatic+0x5c>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	623b      	str	r3, [r7, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <xQueueGenericCreateStatic+0x84>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <xQueueGenericCreateStatic+0x88>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <xQueueGenericCreateStatic+0x8a>
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	61fb      	str	r3, [r7, #28]
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	e7fd      	b.n	8002d5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d5e:	2350      	movs	r3, #80	@ 0x50
 8002d60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b50      	cmp	r3, #80	@ 0x50
 8002d66:	d00b      	beq.n	8002d80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	61bb      	str	r3, [r7, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f840 	bl	8002e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3730      	adds	r7, #48	@ 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08a      	sub	sp, #40	@ 0x28
 8002db6:	af02      	add	r7, sp, #8
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <xQueueGenericCreate+0x2c>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	613b      	str	r3, [r7, #16]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	3350      	adds	r3, #80	@ 0x50
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 f87f 	bl	8004ef0 <pvPortMalloc>
 8002df2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d011      	beq.n	8002e1e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3350      	adds	r3, #80	@ 0x50
 8002e02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e0c:	79fa      	ldrb	r2, [r7, #7]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4613      	mov	r3, r2
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f805 	bl	8002e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e002      	b.n	8002e4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e56:	2101      	movs	r1, #1
 8002e58:	69b8      	ldr	r0, [r7, #24]
 8002e5a:	f7ff fec3 	bl	8002be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08e      	sub	sp, #56	@ 0x38
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <xQueueGenericSend+0x34>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSend+0x42>
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <xQueueGenericSend+0x46>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <xQueueGenericSend+0x48>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <xQueueGenericSend+0x64>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSend+0x72>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <xQueueGenericSend+0x76>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <xQueueGenericSend+0x78>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <xQueueGenericSend+0x94>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	623b      	str	r3, [r7, #32]
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f04:	f001 f9ca 	bl	800429c <xTaskGetSchedulerState>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <xQueueGenericSend+0xa4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <xQueueGenericSend+0xa8>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <xQueueGenericSend+0xaa>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <xQueueGenericSend+0xc6>
	__asm volatile
 8002f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f22:	f383 8811 	msr	BASEPRI, r3
 8002f26:	f3bf 8f6f 	isb	sy
 8002f2a:	f3bf 8f4f 	dsb	sy
 8002f2e:	61fb      	str	r3, [r7, #28]
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	e7fd      	b.n	8002f32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f36:	f001 fed9 	bl	8004cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <xQueueGenericSend+0xdc>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d129      	bne.n	8002fa0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f52:	f000 fa0f 	bl	8003374 <prvCopyDataToQueue>
 8002f56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	3324      	adds	r3, #36	@ 0x24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 ffd9 	bl	8003f1c <xTaskRemoveFromEventList>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f70:	4b3f      	ldr	r3, [pc, #252]	@ (8003070 <xQueueGenericSend+0x200>)
 8002f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	e00a      	b.n	8002f98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f88:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <xQueueGenericSend+0x200>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f98:	f001 fed8 	bl	8004d4c <vPortExitCritical>
				return pdPASS;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e063      	b.n	8003068 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fa6:	f001 fed1 	bl	8004d4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e05c      	b.n	8003068 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 f813 	bl	8003fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fc2:	f001 fec3 	bl	8004d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fc6:	f000 fd85 	bl	8003ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fca:	f001 fe8f 	bl	8004cec <vPortEnterCritical>
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fd4:	b25b      	sxtb	r3, r3
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d103      	bne.n	8002fe4 <xQueueGenericSend+0x174>
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fea:	b25b      	sxtb	r3, r3
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d103      	bne.n	8002ffa <xQueueGenericSend+0x18a>
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ffa:	f001 fea7 	bl	8004d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ffe:	1d3a      	adds	r2, r7, #4
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f001 f802 	bl	8004010 <xTaskCheckForTimeOut>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d124      	bne.n	800305c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003012:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003014:	f000 faa6 	bl	8003564 <prvIsQueueFull>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003020:	3310      	adds	r3, #16
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f000 ff26 	bl	8003e78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800302c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800302e:	f000 fa31 	bl	8003494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003032:	f000 fd5d 	bl	8003af0 <xTaskResumeAll>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f af7c 	bne.w	8002f36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800303e:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <xQueueGenericSend+0x200>)
 8003040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	e772      	b.n	8002f36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003050:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003052:	f000 fa1f 	bl	8003494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003056:	f000 fd4b 	bl	8003af0 <xTaskResumeAll>
 800305a:	e76c      	b.n	8002f36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800305c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800305e:	f000 fa19 	bl	8003494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003062:	f000 fd45 	bl	8003af0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003068:	4618      	mov	r0, r3
 800306a:	3738      	adds	r7, #56	@ 0x38
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b090      	sub	sp, #64	@ 0x40
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <xQueueGenericSendFromISR+0x3e>
 80030aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <xQueueGenericSendFromISR+0x42>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <xQueueGenericSendFromISR+0x44>
 80030b6:	2300      	movs	r3, #0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d103      	bne.n	80030e2 <xQueueGenericSendFromISR+0x6e>
 80030da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <xQueueGenericSendFromISR+0x72>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <xQueueGenericSendFromISR+0x74>
 80030e6:	2300      	movs	r3, #0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	623b      	str	r3, [r7, #32]
}
 80030fe:	bf00      	nop
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003104:	f001 feb4 	bl	8004e70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003108:	f3ef 8211 	mrs	r2, BASEPRI
 800310c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	61fa      	str	r2, [r7, #28]
 800311e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003120:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003122:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	429a      	cmp	r2, r3
 800312e:	d302      	bcc.n	8003136 <xQueueGenericSendFromISR+0xc2>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d12f      	bne.n	8003196 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800313c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800314c:	f000 f912 	bl	8003374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003150:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d112      	bne.n	8003180 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800315a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003164:	3324      	adds	r3, #36	@ 0x24
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fed8 	bl	8003f1c <xTaskRemoveFromEventList>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00e      	beq.n	8003190 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e007      	b.n	8003190 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003180:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003184:	3301      	adds	r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	b25a      	sxtb	r2, r3
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003190:	2301      	movs	r3, #1
 8003192:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003194:	e001      	b.n	800319a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003196:	2300      	movs	r3, #0
 8003198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3740      	adds	r7, #64	@ 0x40
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	@ 0x30
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031bc:	2300      	movs	r3, #0
 80031be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10b      	bne.n	80031e2 <xQueueReceive+0x32>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	623b      	str	r3, [r7, #32]
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <xQueueReceive+0x40>
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <xQueueReceive+0x44>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <xQueueReceive+0x46>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <xQueueReceive+0x62>
	__asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	61fb      	str	r3, [r7, #28]
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	e7fd      	b.n	800320e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003212:	f001 f843 	bl	800429c <xTaskGetSchedulerState>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <xQueueReceive+0x72>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <xQueueReceive+0x76>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <xQueueReceive+0x78>
 8003226:	2300      	movs	r3, #0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <xQueueReceive+0x94>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61bb      	str	r3, [r7, #24]
}
 800323e:	bf00      	nop
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003244:	f001 fd52 	bl	8004cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01f      	beq.n	8003294 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003258:	f000 f8f6 	bl	8003448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	1e5a      	subs	r2, r3, #1
 8003260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003262:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00f      	beq.n	800328c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800326c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326e:	3310      	adds	r3, #16
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fe53 	bl	8003f1c <xTaskRemoveFromEventList>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800327c:	4b3c      	ldr	r3, [pc, #240]	@ (8003370 <xQueueReceive+0x1c0>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800328c:	f001 fd5e 	bl	8004d4c <vPortExitCritical>
				return pdPASS;
 8003290:	2301      	movs	r3, #1
 8003292:	e069      	b.n	8003368 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800329a:	f001 fd57 	bl	8004d4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800329e:	2300      	movs	r3, #0
 80032a0:	e062      	b.n	8003368 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032a8:	f107 0310 	add.w	r3, r7, #16
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fe99 	bl	8003fe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032b2:	2301      	movs	r3, #1
 80032b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032b6:	f001 fd49 	bl	8004d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032ba:	f000 fc0b 	bl	8003ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032be:	f001 fd15 	bl	8004cec <vPortEnterCritical>
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c8:	b25b      	sxtb	r3, r3
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d103      	bne.n	80032d8 <xQueueReceive+0x128>
 80032d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032de:	b25b      	sxtb	r3, r3
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d103      	bne.n	80032ee <xQueueReceive+0x13e>
 80032e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ee:	f001 fd2d 	bl	8004d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032f2:	1d3a      	adds	r2, r7, #4
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fe88 	bl	8004010 <xTaskCheckForTimeOut>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d123      	bne.n	800334e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003308:	f000 f916 	bl	8003538 <prvIsQueueEmpty>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d017      	beq.n	8003342 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	3324      	adds	r3, #36	@ 0x24
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fdac 	bl	8003e78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003320:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003322:	f000 f8b7 	bl	8003494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003326:	f000 fbe3 	bl	8003af0 <xTaskResumeAll>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d189      	bne.n	8003244 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003330:	4b0f      	ldr	r3, [pc, #60]	@ (8003370 <xQueueReceive+0x1c0>)
 8003332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	e780      	b.n	8003244 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003344:	f000 f8a6 	bl	8003494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003348:	f000 fbd2 	bl	8003af0 <xTaskResumeAll>
 800334c:	e77a      	b.n	8003244 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800334e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003350:	f000 f8a0 	bl	8003494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003354:	f000 fbcc 	bl	8003af0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800335a:	f000 f8ed 	bl	8003538 <prvIsQueueEmpty>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	f43f af6f 	beq.w	8003244 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003366:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003368:	4618      	mov	r0, r3
 800336a:	3730      	adds	r7, #48	@ 0x30
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d14d      	bne.n	8003436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 ff9a 	bl	80042d8 <xTaskPriorityDisinherit>
 80033a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	e043      	b.n	8003436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d119      	bne.n	80033e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6858      	ldr	r0, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	461a      	mov	r2, r3
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	f001 ffae 	bl	8005320 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	441a      	add	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d32b      	bcc.n	8003436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	e026      	b.n	8003436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68d8      	ldr	r0, [r3, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f0:	461a      	mov	r2, r3
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	f001 ff94 	bl	8005320 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	425b      	negs	r3, r3
 8003402:	441a      	add	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d207      	bcs.n	8003424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	425b      	negs	r3, r3
 800341e:	441a      	add	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d105      	bne.n	8003436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	3b01      	subs	r3, #1
 8003434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800343e:	697b      	ldr	r3, [r7, #20]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d018      	beq.n	800348c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	441a      	add	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	d303      	bcc.n	800347c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68d9      	ldr	r1, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	461a      	mov	r2, r3
 8003486:	6838      	ldr	r0, [r7, #0]
 8003488:	f001 ff4a 	bl	8005320 <memcpy>
	}
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800349c:	f001 fc26 	bl	8004cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a8:	e011      	b.n	80034ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d012      	beq.n	80034d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3324      	adds	r3, #36	@ 0x24
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fd30 	bl	8003f1c <xTaskRemoveFromEventList>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034c2:	f000 fe09 	bl	80040d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	dce9      	bgt.n	80034aa <prvUnlockQueue+0x16>
 80034d6:	e000      	b.n	80034da <prvUnlockQueue+0x46>
					break;
 80034d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	22ff      	movs	r2, #255	@ 0xff
 80034de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80034e2:	f001 fc33 	bl	8004d4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034e6:	f001 fc01 	bl	8004cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034f2:	e011      	b.n	8003518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d012      	beq.n	8003522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3310      	adds	r3, #16
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fd0b 	bl	8003f1c <xTaskRemoveFromEventList>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800350c:	f000 fde4 	bl	80040d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003510:	7bbb      	ldrb	r3, [r7, #14]
 8003512:	3b01      	subs	r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800351c:	2b00      	cmp	r3, #0
 800351e:	dce9      	bgt.n	80034f4 <prvUnlockQueue+0x60>
 8003520:	e000      	b.n	8003524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	22ff      	movs	r2, #255	@ 0xff
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800352c:	f001 fc0e 	bl	8004d4c <vPortExitCritical>
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003540:	f001 fbd4 	bl	8004cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800354c:	2301      	movs	r3, #1
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e001      	b.n	8003556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003556:	f001 fbf9 	bl	8004d4c <vPortExitCritical>

	return xReturn;
 800355a:	68fb      	ldr	r3, [r7, #12]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800356c:	f001 fbbe 	bl	8004cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	429a      	cmp	r2, r3
 800357a:	d102      	bne.n	8003582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800357c:	2301      	movs	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e001      	b.n	8003586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003586:	f001 fbe1 	bl	8004d4c <vPortExitCritical>

	return xReturn;
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e014      	b.n	80035ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035a4:	4a0e      	ldr	r2, [pc, #56]	@ (80035e0 <vQueueAddToRegistry+0x4c>)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035b0:	490b      	ldr	r1, [pc, #44]	@ (80035e0 <vQueueAddToRegistry+0x4c>)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035ba:	4a09      	ldr	r2, [pc, #36]	@ (80035e0 <vQueueAddToRegistry+0x4c>)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035c6:	e006      	b.n	80035d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b07      	cmp	r3, #7
 80035d2:	d9e7      	bls.n	80035a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	2000080c 	.word	0x2000080c

080035e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035f4:	f001 fb7a 	bl	8004cec <vPortEnterCritical>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d103      	bne.n	800360e <vQueueWaitForMessageRestricted+0x2a>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003614:	b25b      	sxtb	r3, r3
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d103      	bne.n	8003624 <vQueueWaitForMessageRestricted+0x40>
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003624:	f001 fb92 	bl	8004d4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3324      	adds	r3, #36	@ 0x24
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fc43 	bl	8003ec4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800363e:	6978      	ldr	r0, [r7, #20]
 8003640:	f7ff ff28 	bl	8003494 <prvUnlockQueue>
	}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08e      	sub	sp, #56	@ 0x38
 8003650:	af04      	add	r7, sp, #16
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800365a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	623b      	str	r3, [r7, #32]
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <xTaskCreateStatic+0x4a>
	__asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	61fb      	str	r3, [r7, #28]
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	e7fd      	b.n	8003692 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003696:	235c      	movs	r3, #92	@ 0x5c
 8003698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b5c      	cmp	r3, #92	@ 0x5c
 800369e:	d00b      	beq.n	80036b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	61bb      	str	r3, [r7, #24]
}
 80036b2:	bf00      	nop
 80036b4:	bf00      	nop
 80036b6:	e7fd      	b.n	80036b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01e      	beq.n	80036fe <xTaskCreateStatic+0xb2>
 80036c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01b      	beq.n	80036fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036d8:	2300      	movs	r3, #0
 80036da:	9303      	str	r3, [sp, #12]
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	9302      	str	r3, [sp, #8]
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f850 	bl	8003796 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036f8:	f000 f8de 	bl	80038b8 <prvAddNewTaskToReadyList>
 80036fc:	e001      	b.n	8003702 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003702:	697b      	ldr	r3, [r7, #20]
	}
 8003704:	4618      	mov	r0, r3
 8003706:	3728      	adds	r7, #40	@ 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	@ 0x30
 8003710:	af04      	add	r7, sp, #16
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fbe5 	bl	8004ef0 <pvPortMalloc>
 8003726:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00e      	beq.n	800374c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800372e:	205c      	movs	r0, #92	@ 0x5c
 8003730:	f001 fbde 	bl	8004ef0 <pvPortMalloc>
 8003734:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	631a      	str	r2, [r3, #48]	@ 0x30
 8003742:	e005      	b.n	8003750 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003744:	6978      	ldr	r0, [r7, #20]
 8003746:	f001 fca1 	bl	800508c <vPortFree>
 800374a:	e001      	b.n	8003750 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d017      	beq.n	8003786 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	2300      	movs	r3, #0
 8003762:	9303      	str	r3, [sp, #12]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 f80e 	bl	8003796 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800377a:	69f8      	ldr	r0, [r7, #28]
 800377c:	f000 f89c 	bl	80038b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003780:	2301      	movs	r3, #1
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	e002      	b.n	800378c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
 800378a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800378c:	69bb      	ldr	r3, [r7, #24]
	}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b088      	sub	sp, #32
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	461a      	mov	r2, r3
 80037ae:	21a5      	movs	r1, #165	@ 0xa5
 80037b0:	f001 fd8a 	bl	80052c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037be:	3b01      	subs	r3, #1
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f023 0307 	bic.w	r3, r3, #7
 80037cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	617b      	str	r3, [r7, #20]
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01f      	beq.n	8003836 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	e012      	b.n	8003822 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	7819      	ldrb	r1, [r3, #0]
 8003804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	3334      	adds	r3, #52	@ 0x34
 800380c:	460a      	mov	r2, r1
 800380e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d006      	beq.n	800382a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	3301      	adds	r3, #1
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2b0f      	cmp	r3, #15
 8003826:	d9e9      	bls.n	80037fc <prvInitialiseNewTask+0x66>
 8003828:	e000      	b.n	800382c <prvInitialiseNewTask+0x96>
			{
				break;
 800382a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003834:	e003      	b.n	800383e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	2b37      	cmp	r3, #55	@ 0x37
 8003842:	d901      	bls.n	8003848 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003844:	2337      	movs	r3, #55	@ 0x37
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800384c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003852:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	2200      	movs	r2, #0
 8003858:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385c:	3304      	adds	r3, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff f92f 	bl	8002ac2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003866:	3318      	adds	r3, #24
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f92a 	bl	8002ac2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003872:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003882:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	69b8      	ldr	r0, [r7, #24]
 8003898:	f001 f93a 	bl	8004b10 <pxPortInitialiseStack>
 800389c:	4602      	mov	r2, r0
 800389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ae:	bf00      	nop
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038c0:	f001 fa14 	bl	8004cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038c4:	4b2d      	ldr	r3, [pc, #180]	@ (800397c <prvAddNewTaskToReadyList+0xc4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a2c      	ldr	r2, [pc, #176]	@ (800397c <prvAddNewTaskToReadyList+0xc4>)
 80038cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003980 <prvAddNewTaskToReadyList+0xc8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003980 <prvAddNewTaskToReadyList+0xc8>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038dc:	4b27      	ldr	r3, [pc, #156]	@ (800397c <prvAddNewTaskToReadyList+0xc4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d110      	bne.n	8003906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038e4:	f000 fc1c 	bl	8004120 <prvInitialiseTaskLists>
 80038e8:	e00d      	b.n	8003906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ea:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <prvAddNewTaskToReadyList+0xcc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038f2:	4b23      	ldr	r3, [pc, #140]	@ (8003980 <prvAddNewTaskToReadyList+0xc8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d802      	bhi.n	8003906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003900:	4a1f      	ldr	r2, [pc, #124]	@ (8003980 <prvAddNewTaskToReadyList+0xc8>)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003906:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <prvAddNewTaskToReadyList+0xd0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3301      	adds	r3, #1
 800390c:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <prvAddNewTaskToReadyList+0xd0>)
 800390e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <prvAddNewTaskToReadyList+0xd0>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391c:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <prvAddNewTaskToReadyList+0xd4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d903      	bls.n	800392c <prvAddNewTaskToReadyList+0x74>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	4a18      	ldr	r2, [pc, #96]	@ (800398c <prvAddNewTaskToReadyList+0xd4>)
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <prvAddNewTaskToReadyList+0xd8>)
 800393a:	441a      	add	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7ff f8c9 	bl	8002ada <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003948:	f001 fa00 	bl	8004d4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800394c:	4b0d      	ldr	r3, [pc, #52]	@ (8003984 <prvAddNewTaskToReadyList+0xcc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003954:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <prvAddNewTaskToReadyList+0xc8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	429a      	cmp	r2, r3
 8003960:	d207      	bcs.n	8003972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003962:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <prvAddNewTaskToReadyList+0xdc>)
 8003964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000d20 	.word	0x20000d20
 8003980:	2000084c 	.word	0x2000084c
 8003984:	20000d2c 	.word	0x20000d2c
 8003988:	20000d3c 	.word	0x20000d3c
 800398c:	20000d28 	.word	0x20000d28
 8003990:	20000850 	.word	0x20000850
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039aa:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <vTaskDelay+0x64>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <vTaskDelay+0x32>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	60bb      	str	r3, [r7, #8]
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039ca:	f000 f883 	bl	8003ad4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039ce:	2100      	movs	r1, #0
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fcf1 	bl	80043b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039d6:	f000 f88b 	bl	8003af0 <xTaskResumeAll>
 80039da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039e2:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <vTaskDelay+0x68>)
 80039e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000d48 	.word	0x20000d48
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08a      	sub	sp, #40	@ 0x28
 8003a08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a12:	463a      	mov	r2, r7
 8003a14:	1d39      	adds	r1, r7, #4
 8003a16:	f107 0308 	add.w	r3, r7, #8
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff f800 	bl	8002a20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	9202      	str	r2, [sp, #8]
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	460a      	mov	r2, r1
 8003a32:	4922      	ldr	r1, [pc, #136]	@ (8003abc <vTaskStartScheduler+0xb8>)
 8003a34:	4822      	ldr	r0, [pc, #136]	@ (8003ac0 <vTaskStartScheduler+0xbc>)
 8003a36:	f7ff fe09 	bl	800364c <xTaskCreateStatic>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4a21      	ldr	r2, [pc, #132]	@ (8003ac4 <vTaskStartScheduler+0xc0>)
 8003a3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a40:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <vTaskStartScheduler+0xc0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e001      	b.n	8003a52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d102      	bne.n	8003a5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a58:	f000 fd02 	bl	8004460 <xTimerCreateTimerTask>
 8003a5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d116      	bne.n	8003a92 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	613b      	str	r3, [r7, #16]
}
 8003a76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a78:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <vTaskStartScheduler+0xc4>)
 8003a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <vTaskStartScheduler+0xc8>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <vTaskStartScheduler+0xcc>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a8c:	f001 f8bc 	bl	8004c08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a90:	e00f      	b.n	8003ab2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d10b      	bne.n	8003ab2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	60fb      	str	r3, [r7, #12]
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	e7fd      	b.n	8003aae <vTaskStartScheduler+0xaa>
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	08005360 	.word	0x08005360
 8003ac0:	080040f1 	.word	0x080040f1
 8003ac4:	20000d44 	.word	0x20000d44
 8003ac8:	20000d40 	.word	0x20000d40
 8003acc:	20000d2c 	.word	0x20000d2c
 8003ad0:	20000d24 	.word	0x20000d24

08003ad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ad8:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <vTaskSuspendAll+0x18>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	4a03      	ldr	r2, [pc, #12]	@ (8003aec <vTaskSuspendAll+0x18>)
 8003ae0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000d48 	.word	0x20000d48

08003af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003afe:	4b42      	ldr	r3, [pc, #264]	@ (8003c08 <xTaskResumeAll+0x118>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <xTaskResumeAll+0x2e>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	603b      	str	r3, [r7, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	e7fd      	b.n	8003b1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b1e:	f001 f8e5 	bl	8004cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b22:	4b39      	ldr	r3, [pc, #228]	@ (8003c08 <xTaskResumeAll+0x118>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	4a37      	ldr	r2, [pc, #220]	@ (8003c08 <xTaskResumeAll+0x118>)
 8003b2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b2c:	4b36      	ldr	r3, [pc, #216]	@ (8003c08 <xTaskResumeAll+0x118>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d162      	bne.n	8003bfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b34:	4b35      	ldr	r3, [pc, #212]	@ (8003c0c <xTaskResumeAll+0x11c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d05e      	beq.n	8003bfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b3c:	e02f      	b.n	8003b9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3e:	4b34      	ldr	r3, [pc, #208]	@ (8003c10 <xTaskResumeAll+0x120>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3318      	adds	r3, #24
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff f820 	bl	8002b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff f81b 	bl	8002b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c14 <xTaskResumeAll+0x124>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d903      	bls.n	8003b6e <xTaskResumeAll+0x7e>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c14 <xTaskResumeAll+0x124>)
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4a27      	ldr	r2, [pc, #156]	@ (8003c18 <xTaskResumeAll+0x128>)
 8003b7c:	441a      	add	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3304      	adds	r3, #4
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fe ffa8 	bl	8002ada <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8e:	4b23      	ldr	r3, [pc, #140]	@ (8003c1c <xTaskResumeAll+0x12c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d302      	bcc.n	8003b9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b98:	4b21      	ldr	r3, [pc, #132]	@ (8003c20 <xTaskResumeAll+0x130>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c10 <xTaskResumeAll+0x120>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1cb      	bne.n	8003b3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bac:	f000 fb56 	bl	800425c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <xTaskResumeAll+0x134>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d010      	beq.n	8003bde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bbc:	f000 f844 	bl	8003c48 <xTaskIncrementTick>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003bc6:	4b16      	ldr	r3, [pc, #88]	@ (8003c20 <xTaskResumeAll+0x130>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f1      	bne.n	8003bbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <xTaskResumeAll+0x134>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <xTaskResumeAll+0x130>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003be6:	2301      	movs	r3, #1
 8003be8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bea:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <xTaskResumeAll+0x138>)
 8003bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bfa:	f001 f8a7 	bl	8004d4c <vPortExitCritical>

	return xAlreadyYielded;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000d48 	.word	0x20000d48
 8003c0c:	20000d20 	.word	0x20000d20
 8003c10:	20000ce0 	.word	0x20000ce0
 8003c14:	20000d28 	.word	0x20000d28
 8003c18:	20000850 	.word	0x20000850
 8003c1c:	2000084c 	.word	0x2000084c
 8003c20:	20000d34 	.word	0x20000d34
 8003c24:	20000d30 	.word	0x20000d30
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c32:	4b04      	ldr	r3, [pc, #16]	@ (8003c44 <xTaskGetTickCount+0x18>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c38:	687b      	ldr	r3, [r7, #4]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	20000d24 	.word	0x20000d24

08003c48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c52:	4b4f      	ldr	r3, [pc, #316]	@ (8003d90 <xTaskIncrementTick+0x148>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 8090 	bne.w	8003d7c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003d94 <xTaskIncrementTick+0x14c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c64:	4a4b      	ldr	r2, [pc, #300]	@ (8003d94 <xTaskIncrementTick+0x14c>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d121      	bne.n	8003cb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c70:	4b49      	ldr	r3, [pc, #292]	@ (8003d98 <xTaskIncrementTick+0x150>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	603b      	str	r3, [r7, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	e7fd      	b.n	8003c8e <xTaskIncrementTick+0x46>
 8003c92:	4b41      	ldr	r3, [pc, #260]	@ (8003d98 <xTaskIncrementTick+0x150>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	4b40      	ldr	r3, [pc, #256]	@ (8003d9c <xTaskIncrementTick+0x154>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8003d98 <xTaskIncrementTick+0x150>)
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4a3e      	ldr	r2, [pc, #248]	@ (8003d9c <xTaskIncrementTick+0x154>)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8003da0 <xTaskIncrementTick+0x158>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3301      	adds	r3, #1
 8003cac:	4a3c      	ldr	r2, [pc, #240]	@ (8003da0 <xTaskIncrementTick+0x158>)
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	f000 fad4 	bl	800425c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003da4 <xTaskIncrementTick+0x15c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d349      	bcc.n	8003d52 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cbe:	4b36      	ldr	r3, [pc, #216]	@ (8003d98 <xTaskIncrementTick+0x150>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d104      	bne.n	8003cd2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc8:	4b36      	ldr	r3, [pc, #216]	@ (8003da4 <xTaskIncrementTick+0x15c>)
 8003cca:	f04f 32ff 	mov.w	r2, #4294967295
 8003cce:	601a      	str	r2, [r3, #0]
					break;
 8003cd0:	e03f      	b.n	8003d52 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd2:	4b31      	ldr	r3, [pc, #196]	@ (8003d98 <xTaskIncrementTick+0x150>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d203      	bcs.n	8003cf2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cea:	4a2e      	ldr	r2, [pc, #184]	@ (8003da4 <xTaskIncrementTick+0x15c>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cf0:	e02f      	b.n	8003d52 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe ff4a 	bl	8002b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d004      	beq.n	8003d0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	3318      	adds	r3, #24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe ff41 	bl	8002b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d12:	4b25      	ldr	r3, [pc, #148]	@ (8003da8 <xTaskIncrementTick+0x160>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d903      	bls.n	8003d22 <xTaskIncrementTick+0xda>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	4a22      	ldr	r2, [pc, #136]	@ (8003da8 <xTaskIncrementTick+0x160>)
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dac <xTaskIncrementTick+0x164>)
 8003d30:	441a      	add	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7fe fece 	bl	8002ada <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d42:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <xTaskIncrementTick+0x168>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d3b8      	bcc.n	8003cbe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d50:	e7b5      	b.n	8003cbe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d52:	4b17      	ldr	r3, [pc, #92]	@ (8003db0 <xTaskIncrementTick+0x168>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d58:	4914      	ldr	r1, [pc, #80]	@ (8003dac <xTaskIncrementTick+0x164>)
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d901      	bls.n	8003d6e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d6e:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <xTaskIncrementTick+0x16c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d76:	2301      	movs	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e004      	b.n	8003d86 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003db8 <xTaskIncrementTick+0x170>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	4a0d      	ldr	r2, [pc, #52]	@ (8003db8 <xTaskIncrementTick+0x170>)
 8003d84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d86:	697b      	ldr	r3, [r7, #20]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000d48 	.word	0x20000d48
 8003d94:	20000d24 	.word	0x20000d24
 8003d98:	20000cd8 	.word	0x20000cd8
 8003d9c:	20000cdc 	.word	0x20000cdc
 8003da0:	20000d38 	.word	0x20000d38
 8003da4:	20000d40 	.word	0x20000d40
 8003da8:	20000d28 	.word	0x20000d28
 8003dac:	20000850 	.word	0x20000850
 8003db0:	2000084c 	.word	0x2000084c
 8003db4:	20000d34 	.word	0x20000d34
 8003db8:	20000d30 	.word	0x20000d30

08003dbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dc2:	4b28      	ldr	r3, [pc, #160]	@ (8003e64 <vTaskSwitchContext+0xa8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dca:	4b27      	ldr	r3, [pc, #156]	@ (8003e68 <vTaskSwitchContext+0xac>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dd0:	e042      	b.n	8003e58 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003dd2:	4b25      	ldr	r3, [pc, #148]	@ (8003e68 <vTaskSwitchContext+0xac>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd8:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <vTaskSwitchContext+0xb0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	e011      	b.n	8003e04 <vTaskSwitchContext+0x48>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <vTaskSwitchContext+0x42>
	__asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	607b      	str	r3, [r7, #4]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <vTaskSwitchContext+0x3e>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	491a      	ldr	r1, [pc, #104]	@ (8003e70 <vTaskSwitchContext+0xb4>)
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0e3      	beq.n	8003de0 <vTaskSwitchContext+0x24>
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4a13      	ldr	r2, [pc, #76]	@ (8003e70 <vTaskSwitchContext+0xb4>)
 8003e24:	4413      	add	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d104      	bne.n	8003e48 <vTaskSwitchContext+0x8c>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <vTaskSwitchContext+0xb8>)
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4a06      	ldr	r2, [pc, #24]	@ (8003e6c <vTaskSwitchContext+0xb0>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6013      	str	r3, [r2, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000d48 	.word	0x20000d48
 8003e68:	20000d34 	.word	0x20000d34
 8003e6c:	20000d28 	.word	0x20000d28
 8003e70:	20000850 	.word	0x20000850
 8003e74:	2000084c 	.word	0x2000084c

08003e78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	60fb      	str	r3, [r7, #12]
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <vTaskPlaceOnEventList+0x48>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3318      	adds	r3, #24
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fe fe39 	bl	8002b20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eae:	2101      	movs	r1, #1
 8003eb0:	6838      	ldr	r0, [r7, #0]
 8003eb2:	f000 fa81 	bl	80043b8 <prvAddCurrentTaskToDelayedList>
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	2000084c 	.word	0x2000084c

08003ec4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	617b      	str	r3, [r7, #20]
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	e7fd      	b.n	8003eea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eee:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <vTaskPlaceOnEventListRestricted+0x54>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3318      	adds	r3, #24
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7fe fdef 	bl	8002ada <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295
 8003f06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	68b8      	ldr	r0, [r7, #8]
 8003f0c:	f000 fa54 	bl	80043b8 <prvAddCurrentTaskToDelayedList>
	}
 8003f10:	bf00      	nop
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	2000084c 	.word	0x2000084c

08003f1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10b      	bne.n	8003f4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	60fb      	str	r3, [r7, #12]
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	e7fd      	b.n	8003f46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	3318      	adds	r3, #24
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe fe1e 	bl	8002b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f54:	4b1d      	ldr	r3, [pc, #116]	@ (8003fcc <xTaskRemoveFromEventList+0xb0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d11d      	bne.n	8003f98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fe15 	bl	8002b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6a:	4b19      	ldr	r3, [pc, #100]	@ (8003fd0 <xTaskRemoveFromEventList+0xb4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d903      	bls.n	8003f7a <xTaskRemoveFromEventList+0x5e>
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f76:	4a16      	ldr	r2, [pc, #88]	@ (8003fd0 <xTaskRemoveFromEventList+0xb4>)
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4a13      	ldr	r2, [pc, #76]	@ (8003fd4 <xTaskRemoveFromEventList+0xb8>)
 8003f88:	441a      	add	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f7fe fda2 	bl	8002ada <vListInsertEnd>
 8003f96:	e005      	b.n	8003fa4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	480e      	ldr	r0, [pc, #56]	@ (8003fd8 <xTaskRemoveFromEventList+0xbc>)
 8003fa0:	f7fe fd9b 	bl	8002ada <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <xTaskRemoveFromEventList+0xc0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d905      	bls.n	8003fbe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe0 <xTaskRemoveFromEventList+0xc4>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e001      	b.n	8003fc2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fc2:	697b      	ldr	r3, [r7, #20]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000d48 	.word	0x20000d48
 8003fd0:	20000d28 	.word	0x20000d28
 8003fd4:	20000850 	.word	0x20000850
 8003fd8:	20000ce0 	.word	0x20000ce0
 8003fdc:	2000084c 	.word	0x2000084c
 8003fe0:	20000d34 	.word	0x20000d34

08003fe4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fec:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <vTaskInternalSetTimeOutState+0x24>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <vTaskInternalSetTimeOutState+0x28>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	605a      	str	r2, [r3, #4]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000d38 	.word	0x20000d38
 800400c:	20000d24 	.word	0x20000d24

08004010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	613b      	str	r3, [r7, #16]
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10b      	bne.n	8004056 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	60fb      	str	r3, [r7, #12]
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	e7fd      	b.n	8004052 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004056:	f000 fe49 	bl	8004cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800405a:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <xTaskCheckForTimeOut+0xc0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d102      	bne.n	800407a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	e023      	b.n	80040c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b15      	ldr	r3, [pc, #84]	@ (80040d4 <xTaskCheckForTimeOut+0xc4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d007      	beq.n	8004096 <xTaskCheckForTimeOut+0x86>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	429a      	cmp	r2, r3
 800408e:	d302      	bcc.n	8004096 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004090:	2301      	movs	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e015      	b.n	80040c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	d20b      	bcs.n	80040b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff99 	bl	8003fe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	e004      	b.n	80040c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040be:	2301      	movs	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040c2:	f000 fe43 	bl	8004d4c <vPortExitCritical>

	return xReturn;
 80040c6:	69fb      	ldr	r3, [r7, #28]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000d24 	.word	0x20000d24
 80040d4:	20000d38 	.word	0x20000d38

080040d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040dc:	4b03      	ldr	r3, [pc, #12]	@ (80040ec <vTaskMissedYield+0x14>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000d34 	.word	0x20000d34

080040f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040f8:	f000 f852 	bl	80041a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <prvIdleTask+0x28>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d9f9      	bls.n	80040f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004104:	4b05      	ldr	r3, [pc, #20]	@ (800411c <prvIdleTask+0x2c>)
 8004106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004114:	e7f0      	b.n	80040f8 <prvIdleTask+0x8>
 8004116:	bf00      	nop
 8004118:	20000850 	.word	0x20000850
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	e00c      	b.n	8004146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4a12      	ldr	r2, [pc, #72]	@ (8004180 <prvInitialiseTaskLists+0x60>)
 8004138:	4413      	add	r3, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fca2 	bl	8002a84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3301      	adds	r3, #1
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b37      	cmp	r3, #55	@ 0x37
 800414a:	d9ef      	bls.n	800412c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800414c:	480d      	ldr	r0, [pc, #52]	@ (8004184 <prvInitialiseTaskLists+0x64>)
 800414e:	f7fe fc99 	bl	8002a84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004152:	480d      	ldr	r0, [pc, #52]	@ (8004188 <prvInitialiseTaskLists+0x68>)
 8004154:	f7fe fc96 	bl	8002a84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004158:	480c      	ldr	r0, [pc, #48]	@ (800418c <prvInitialiseTaskLists+0x6c>)
 800415a:	f7fe fc93 	bl	8002a84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800415e:	480c      	ldr	r0, [pc, #48]	@ (8004190 <prvInitialiseTaskLists+0x70>)
 8004160:	f7fe fc90 	bl	8002a84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004164:	480b      	ldr	r0, [pc, #44]	@ (8004194 <prvInitialiseTaskLists+0x74>)
 8004166:	f7fe fc8d 	bl	8002a84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800416a:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <prvInitialiseTaskLists+0x78>)
 800416c:	4a05      	ldr	r2, [pc, #20]	@ (8004184 <prvInitialiseTaskLists+0x64>)
 800416e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004170:	4b0a      	ldr	r3, [pc, #40]	@ (800419c <prvInitialiseTaskLists+0x7c>)
 8004172:	4a05      	ldr	r2, [pc, #20]	@ (8004188 <prvInitialiseTaskLists+0x68>)
 8004174:	601a      	str	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000850 	.word	0x20000850
 8004184:	20000cb0 	.word	0x20000cb0
 8004188:	20000cc4 	.word	0x20000cc4
 800418c:	20000ce0 	.word	0x20000ce0
 8004190:	20000cf4 	.word	0x20000cf4
 8004194:	20000d0c 	.word	0x20000d0c
 8004198:	20000cd8 	.word	0x20000cd8
 800419c:	20000cdc 	.word	0x20000cdc

080041a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a6:	e019      	b.n	80041dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041a8:	f000 fda0 	bl	8004cec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041ac:	4b10      	ldr	r3, [pc, #64]	@ (80041f0 <prvCheckTasksWaitingTermination+0x50>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fce9 	bl	8002b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <prvCheckTasksWaitingTermination+0x54>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	4a0b      	ldr	r2, [pc, #44]	@ (80041f4 <prvCheckTasksWaitingTermination+0x54>)
 80041c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041c8:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	4a0a      	ldr	r2, [pc, #40]	@ (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041d2:	f000 fdbb 	bl	8004d4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f810 	bl	80041fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041dc:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <prvCheckTasksWaitingTermination+0x58>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e1      	bne.n	80041a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000cf4 	.word	0x20000cf4
 80041f4:	20000d20 	.word	0x20000d20
 80041f8:	20000d08 	.word	0x20000d08

080041fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800420a:	2b00      	cmp	r3, #0
 800420c:	d108      	bne.n	8004220 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	4618      	mov	r0, r3
 8004214:	f000 ff3a 	bl	800508c <vPortFree>
				vPortFree( pxTCB );
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 ff37 	bl	800508c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800421e:	e019      	b.n	8004254 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004226:	2b01      	cmp	r3, #1
 8004228:	d103      	bne.n	8004232 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 ff2e 	bl	800508c <vPortFree>
	}
 8004230:	e010      	b.n	8004254 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004238:	2b02      	cmp	r3, #2
 800423a:	d00b      	beq.n	8004254 <prvDeleteTCB+0x58>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60fb      	str	r3, [r7, #12]
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <prvDeleteTCB+0x54>
	}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004262:	4b0c      	ldr	r3, [pc, #48]	@ (8004294 <prvResetNextTaskUnblockTime+0x38>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d104      	bne.n	8004276 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800426c:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <prvResetNextTaskUnblockTime+0x3c>)
 800426e:	f04f 32ff 	mov.w	r2, #4294967295
 8004272:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004274:	e008      	b.n	8004288 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004276:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <prvResetNextTaskUnblockTime+0x38>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4a04      	ldr	r2, [pc, #16]	@ (8004298 <prvResetNextTaskUnblockTime+0x3c>)
 8004286:	6013      	str	r3, [r2, #0]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000cd8 	.word	0x20000cd8
 8004298:	20000d40 	.word	0x20000d40

0800429c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042a2:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <xTaskGetSchedulerState+0x34>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042aa:	2301      	movs	r3, #1
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	e008      	b.n	80042c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b0:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <xTaskGetSchedulerState+0x38>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d102      	bne.n	80042be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042b8:	2302      	movs	r3, #2
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	e001      	b.n	80042c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042c2:	687b      	ldr	r3, [r7, #4]
	}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000d2c 	.word	0x20000d2c
 80042d4:	20000d48 	.word	0x20000d48

080042d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d058      	beq.n	80043a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042ee:	4b2f      	ldr	r3, [pc, #188]	@ (80043ac <xTaskPriorityDisinherit+0xd4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d00b      	beq.n	8004310 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	60fb      	str	r3, [r7, #12]
}
 800430a:	bf00      	nop
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	60bb      	str	r3, [r7, #8]
}
 800432a:	bf00      	nop
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004334:	1e5a      	subs	r2, r3, #1
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004342:	429a      	cmp	r2, r3
 8004344:	d02c      	beq.n	80043a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800434a:	2b00      	cmp	r3, #0
 800434c:	d128      	bne.n	80043a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fc1c 	bl	8002b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004370:	4b0f      	ldr	r3, [pc, #60]	@ (80043b0 <xTaskPriorityDisinherit+0xd8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d903      	bls.n	8004380 <xTaskPriorityDisinherit+0xa8>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <xTaskPriorityDisinherit+0xd8>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4a09      	ldr	r2, [pc, #36]	@ (80043b4 <xTaskPriorityDisinherit+0xdc>)
 800438e:	441a      	add	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7fe fb9f 	bl	8002ada <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043a0:	697b      	ldr	r3, [r7, #20]
	}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2000084c 	.word	0x2000084c
 80043b0:	20000d28 	.word	0x20000d28
 80043b4:	20000850 	.word	0x20000850

080043b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043c2:	4b21      	ldr	r3, [pc, #132]	@ (8004448 <prvAddCurrentTaskToDelayedList+0x90>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <prvAddCurrentTaskToDelayedList+0x94>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fbde 	bl	8002b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d10a      	bne.n	80043f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043e2:	4b1a      	ldr	r3, [pc, #104]	@ (800444c <prvAddCurrentTaskToDelayedList+0x94>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4819      	ldr	r0, [pc, #100]	@ (8004450 <prvAddCurrentTaskToDelayedList+0x98>)
 80043ec:	f7fe fb75 	bl	8002ada <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043f0:	e026      	b.n	8004440 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043fa:	4b14      	ldr	r3, [pc, #80]	@ (800444c <prvAddCurrentTaskToDelayedList+0x94>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	429a      	cmp	r2, r3
 8004408:	d209      	bcs.n	800441e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800440a:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <prvAddCurrentTaskToDelayedList+0x9c>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <prvAddCurrentTaskToDelayedList+0x94>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3304      	adds	r3, #4
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f7fe fb82 	bl	8002b20 <vListInsert>
}
 800441c:	e010      	b.n	8004440 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800441e:	4b0e      	ldr	r3, [pc, #56]	@ (8004458 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b0a      	ldr	r3, [pc, #40]	@ (800444c <prvAddCurrentTaskToDelayedList+0x94>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7fe fb78 	bl	8002b20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004430:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d202      	bcs.n	8004440 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800443a:	4a08      	ldr	r2, [pc, #32]	@ (800445c <prvAddCurrentTaskToDelayedList+0xa4>)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000d24 	.word	0x20000d24
 800444c:	2000084c 	.word	0x2000084c
 8004450:	20000d0c 	.word	0x20000d0c
 8004454:	20000cdc 	.word	0x20000cdc
 8004458:	20000cd8 	.word	0x20000cd8
 800445c:	20000d40 	.word	0x20000d40

08004460 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	@ 0x28
 8004464:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800446a:	f000 fb11 	bl	8004a90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800446e:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <xTimerCreateTimerTask+0x84>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d021      	beq.n	80044ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800447e:	1d3a      	adds	r2, r7, #4
 8004480:	f107 0108 	add.w	r1, r7, #8
 8004484:	f107 030c 	add.w	r3, r7, #12
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fae1 	bl	8002a50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	9202      	str	r2, [sp, #8]
 8004496:	9301      	str	r3, [sp, #4]
 8004498:	2302      	movs	r3, #2
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	2300      	movs	r3, #0
 800449e:	460a      	mov	r2, r1
 80044a0:	4911      	ldr	r1, [pc, #68]	@ (80044e8 <xTimerCreateTimerTask+0x88>)
 80044a2:	4812      	ldr	r0, [pc, #72]	@ (80044ec <xTimerCreateTimerTask+0x8c>)
 80044a4:	f7ff f8d2 	bl	800364c <xTaskCreateStatic>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4a11      	ldr	r2, [pc, #68]	@ (80044f0 <xTimerCreateTimerTask+0x90>)
 80044ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044ae:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <xTimerCreateTimerTask+0x90>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044b6:	2301      	movs	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	613b      	str	r3, [r7, #16]
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044d8:	697b      	ldr	r3, [r7, #20]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000d7c 	.word	0x20000d7c
 80044e8:	08005368 	.word	0x08005368
 80044ec:	0800462d 	.word	0x0800462d
 80044f0:	20000d80 	.word	0x20000d80

080044f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	@ 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <xTimerGenericCommand+0x30>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	623b      	str	r3, [r7, #32]
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <xTimerGenericCommand+0x98>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02a      	beq.n	8004582 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b05      	cmp	r3, #5
 800453c:	dc18      	bgt.n	8004570 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800453e:	f7ff fead 	bl	800429c <xTaskGetSchedulerState>
 8004542:	4603      	mov	r3, r0
 8004544:	2b02      	cmp	r3, #2
 8004546:	d109      	bne.n	800455c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004548:	4b10      	ldr	r3, [pc, #64]	@ (800458c <xTimerGenericCommand+0x98>)
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	f107 0110 	add.w	r1, r7, #16
 8004550:	2300      	movs	r3, #0
 8004552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004554:	f7fe fc8c 	bl	8002e70 <xQueueGenericSend>
 8004558:	6278      	str	r0, [r7, #36]	@ 0x24
 800455a:	e012      	b.n	8004582 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <xTimerGenericCommand+0x98>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	f107 0110 	add.w	r1, r7, #16
 8004564:	2300      	movs	r3, #0
 8004566:	2200      	movs	r2, #0
 8004568:	f7fe fc82 	bl	8002e70 <xQueueGenericSend>
 800456c:	6278      	str	r0, [r7, #36]	@ 0x24
 800456e:	e008      	b.n	8004582 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004570:	4b06      	ldr	r3, [pc, #24]	@ (800458c <xTimerGenericCommand+0x98>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	f107 0110 	add.w	r1, r7, #16
 8004578:	2300      	movs	r3, #0
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	f7fe fd7a 	bl	8003074 <xQueueGenericSendFromISR>
 8004580:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004584:	4618      	mov	r0, r3
 8004586:	3728      	adds	r7, #40	@ 0x28
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000d7c 	.word	0x20000d7c

08004590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af02      	add	r7, sp, #8
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459a:	4b23      	ldr	r3, [pc, #140]	@ (8004628 <prvProcessExpiredTimer+0x98>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe faf1 	bl	8002b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d023      	beq.n	8004604 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	699a      	ldr	r2, [r3, #24]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	18d1      	adds	r1, r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	6978      	ldr	r0, [r7, #20]
 80045ca:	f000 f8d3 	bl	8004774 <prvInsertTimerInActiveList>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045d4:	2300      	movs	r3, #0
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	2100      	movs	r1, #0
 80045de:	6978      	ldr	r0, [r7, #20]
 80045e0:	f7ff ff88 	bl	80044f4 <xTimerGenericCommand>
 80045e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d114      	bne.n	8004616 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60fb      	str	r3, [r7, #12]
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	b2da      	uxtb	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	4798      	blx	r3
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000d74 	.word	0x20000d74

0800462c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004634:	f107 0308 	add.w	r3, r7, #8
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f859 	bl	80046f0 <prvGetNextExpireTime>
 800463e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4619      	mov	r1, r3
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f805 	bl	8004654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800464a:	f000 f8d5 	bl	80047f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800464e:	bf00      	nop
 8004650:	e7f0      	b.n	8004634 <prvTimerTask+0x8>
	...

08004654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800465e:	f7ff fa39 	bl	8003ad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f864 	bl	8004734 <prvSampleTimeNow>
 800466c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d130      	bne.n	80046d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <prvProcessTimerOrBlockTask+0x3c>
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	429a      	cmp	r2, r3
 8004680:	d806      	bhi.n	8004690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004682:	f7ff fa35 	bl	8003af0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff81 	bl	8004590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800468e:	e024      	b.n	80046da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004696:	4b13      	ldr	r3, [pc, #76]	@ (80046e4 <prvProcessTimerOrBlockTask+0x90>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <prvProcessTimerOrBlockTask+0x50>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <prvProcessTimerOrBlockTask+0x52>
 80046a4:	2300      	movs	r3, #0
 80046a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046a8:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <prvProcessTimerOrBlockTask+0x94>)
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	f7fe ff95 	bl	80035e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ba:	f7ff fa19 	bl	8003af0 <xTaskResumeAll>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046c4:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <prvProcessTimerOrBlockTask+0x98>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
}
 80046d4:	e001      	b.n	80046da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046d6:	f7ff fa0b 	bl	8003af0 <xTaskResumeAll>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000d78 	.word	0x20000d78
 80046e8:	20000d7c 	.word	0x20000d7c
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004730 <prvGetNextExpireTime+0x40>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <prvGetNextExpireTime+0x16>
 8004702:	2201      	movs	r2, #1
 8004704:	e000      	b.n	8004708 <prvGetNextExpireTime+0x18>
 8004706:	2200      	movs	r2, #0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d105      	bne.n	8004720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004714:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <prvGetNextExpireTime+0x40>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e001      	b.n	8004724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004724:	68fb      	ldr	r3, [r7, #12]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	20000d74 	.word	0x20000d74

08004734 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800473c:	f7ff fa76 	bl	8003c2c <xTaskGetTickCount>
 8004740:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004742:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <prvSampleTimeNow+0x3c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	429a      	cmp	r2, r3
 800474a:	d205      	bcs.n	8004758 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800474c:	f000 f93a 	bl	80049c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e002      	b.n	800475e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800475e:	4a04      	ldr	r2, [pc, #16]	@ (8004770 <prvSampleTimeNow+0x3c>)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004764:	68fb      	ldr	r3, [r7, #12]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000d84 	.word	0x20000d84

08004774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d812      	bhi.n	80047c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	1ad2      	subs	r2, r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d302      	bcc.n	80047ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e01b      	b.n	80047e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047ae:	4b10      	ldr	r3, [pc, #64]	@ (80047f0 <prvInsertTimerInActiveList+0x7c>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe f9b1 	bl	8002b20 <vListInsert>
 80047be:	e012      	b.n	80047e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d206      	bcs.n	80047d6 <prvInsertTimerInActiveList+0x62>
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e007      	b.n	80047e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047d6:	4b07      	ldr	r3, [pc, #28]	@ (80047f4 <prvInsertTimerInActiveList+0x80>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7fe f99d 	bl	8002b20 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047e6:	697b      	ldr	r3, [r7, #20]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000d78 	.word	0x20000d78
 80047f4:	20000d74 	.word	0x20000d74

080047f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08e      	sub	sp, #56	@ 0x38
 80047fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047fe:	e0ce      	b.n	800499e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	da19      	bge.n	800483a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004806:	1d3b      	adds	r3, r7, #4
 8004808:	3304      	adds	r3, #4
 800480a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800480c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	61fb      	str	r3, [r7, #28]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800482a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004830:	6850      	ldr	r0, [r2, #4]
 8004832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004834:	6892      	ldr	r2, [r2, #8]
 8004836:	4611      	mov	r1, r2
 8004838:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f2c0 80ae 	blt.w	800499e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d004      	beq.n	8004858 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	3304      	adds	r3, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe f99c 	bl	8002b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004858:	463b      	mov	r3, r7
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff6a 	bl	8004734 <prvSampleTimeNow>
 8004860:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b09      	cmp	r3, #9
 8004866:	f200 8097 	bhi.w	8004998 <prvProcessReceivedCommands+0x1a0>
 800486a:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <prvProcessReceivedCommands+0x78>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004899 	.word	0x08004899
 8004874:	08004899 	.word	0x08004899
 8004878:	08004899 	.word	0x08004899
 800487c:	0800490f 	.word	0x0800490f
 8004880:	08004923 	.word	0x08004923
 8004884:	0800496f 	.word	0x0800496f
 8004888:	08004899 	.word	0x08004899
 800488c:	08004899 	.word	0x08004899
 8004890:	0800490f 	.word	0x0800490f
 8004894:	08004923 	.word	0x08004923
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	18d1      	adds	r1, r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b8:	f7ff ff5c 	bl	8004774 <prvInsertTimerInActiveList>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d06c      	beq.n	800499c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d061      	beq.n	800499c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	441a      	add	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ea:	f7ff fe03 	bl	80044f4 <xTimerGenericCommand>
 80048ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d152      	bne.n	800499c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	61bb      	str	r3, [r7, #24]
}
 8004908:	bf00      	nop
 800490a:	bf00      	nop
 800490c:	e7fd      	b.n	800490a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800490e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	b2da      	uxtb	r2, r3
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004920:	e03d      	b.n	800499e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	b2da      	uxtb	r2, r3
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800493a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	617b      	str	r3, [r7, #20]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	18d1      	adds	r1, r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004968:	f7ff ff04 	bl	8004774 <prvInsertTimerInActiveList>
					break;
 800496c:	e017      	b.n	800499e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800497c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800497e:	f000 fb85 	bl	800508c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004982:	e00c      	b.n	800499e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	b2da      	uxtb	r2, r3
 8004990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004996:	e002      	b.n	800499e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004998:	bf00      	nop
 800499a:	e000      	b.n	800499e <prvProcessReceivedCommands+0x1a6>
					break;
 800499c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800499e:	4b08      	ldr	r3, [pc, #32]	@ (80049c0 <prvProcessReceivedCommands+0x1c8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	1d39      	adds	r1, r7, #4
 80049a4:	2200      	movs	r2, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fc02 	bl	80031b0 <xQueueReceive>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f47f af26 	bne.w	8004800 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3730      	adds	r7, #48	@ 0x30
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000d7c 	.word	0x20000d7c

080049c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ca:	e049      	b.n	8004a60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004a88 <prvSwitchTimerLists+0xc4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a88 <prvSwitchTimerLists+0xc4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe f8d3 	bl	8002b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02f      	beq.n	8004a60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d90e      	bls.n	8004a30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004a88 <prvSwitchTimerLists+0xc4>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f7fe f879 	bl	8002b20 <vListInsert>
 8004a2e:	e017      	b.n	8004a60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a30:	2300      	movs	r3, #0
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2300      	movs	r3, #0
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff fd5a 	bl	80044f4 <xTimerGenericCommand>
 8004a40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	603b      	str	r3, [r7, #0]
}
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a60:	4b09      	ldr	r3, [pc, #36]	@ (8004a88 <prvSwitchTimerLists+0xc4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1b0      	bne.n	80049cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a6a:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <prvSwitchTimerLists+0xc4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a70:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <prvSwitchTimerLists+0xc8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a04      	ldr	r2, [pc, #16]	@ (8004a88 <prvSwitchTimerLists+0xc4>)
 8004a76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a78:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <prvSwitchTimerLists+0xc8>)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6013      	str	r3, [r2, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000d74 	.word	0x20000d74
 8004a8c:	20000d78 	.word	0x20000d78

08004a90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a96:	f000 f929 	bl	8004cec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a9a:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <prvCheckForValidListAndQueue+0x60>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d120      	bne.n	8004ae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004aa2:	4814      	ldr	r0, [pc, #80]	@ (8004af4 <prvCheckForValidListAndQueue+0x64>)
 8004aa4:	f7fd ffee 	bl	8002a84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004aa8:	4813      	ldr	r0, [pc, #76]	@ (8004af8 <prvCheckForValidListAndQueue+0x68>)
 8004aaa:	f7fd ffeb 	bl	8002a84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004aae:	4b13      	ldr	r3, [pc, #76]	@ (8004afc <prvCheckForValidListAndQueue+0x6c>)
 8004ab0:	4a10      	ldr	r2, [pc, #64]	@ (8004af4 <prvCheckForValidListAndQueue+0x64>)
 8004ab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ab4:	4b12      	ldr	r3, [pc, #72]	@ (8004b00 <prvCheckForValidListAndQueue+0x70>)
 8004ab6:	4a10      	ldr	r2, [pc, #64]	@ (8004af8 <prvCheckForValidListAndQueue+0x68>)
 8004ab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004aba:	2300      	movs	r3, #0
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4b11      	ldr	r3, [pc, #68]	@ (8004b04 <prvCheckForValidListAndQueue+0x74>)
 8004ac0:	4a11      	ldr	r2, [pc, #68]	@ (8004b08 <prvCheckForValidListAndQueue+0x78>)
 8004ac2:	2110      	movs	r1, #16
 8004ac4:	200a      	movs	r0, #10
 8004ac6:	f7fe f8f7 	bl	8002cb8 <xQueueGenericCreateStatic>
 8004aca:	4603      	mov	r3, r0
 8004acc:	4a08      	ldr	r2, [pc, #32]	@ (8004af0 <prvCheckForValidListAndQueue+0x60>)
 8004ace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ad0:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <prvCheckForValidListAndQueue+0x60>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <prvCheckForValidListAndQueue+0x60>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	490b      	ldr	r1, [pc, #44]	@ (8004b0c <prvCheckForValidListAndQueue+0x7c>)
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fd58 	bl	8003594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ae4:	f000 f932 	bl	8004d4c <vPortExitCritical>
}
 8004ae8:	bf00      	nop
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000d7c 	.word	0x20000d7c
 8004af4:	20000d4c 	.word	0x20000d4c
 8004af8:	20000d60 	.word	0x20000d60
 8004afc:	20000d74 	.word	0x20000d74
 8004b00:	20000d78 	.word	0x20000d78
 8004b04:	20000e28 	.word	0x20000e28
 8004b08:	20000d88 	.word	0x20000d88
 8004b0c:	08005370 	.word	0x08005370

08004b10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3b04      	subs	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b04      	subs	r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b40:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <pxPortInitialiseStack+0x54>)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b14      	subs	r3, #20
 8004b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b20      	subs	r3, #32
 8004b56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b58:	68fb      	ldr	r3, [r7, #12]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr
 8004b64:	08004b69 	.word	0x08004b69

08004b68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b72:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <prvTaskExitError+0x54>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d00b      	beq.n	8004b94 <prvTaskExitError+0x2c>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	60fb      	str	r3, [r7, #12]
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	e7fd      	b.n	8004b90 <prvTaskExitError+0x28>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60bb      	str	r3, [r7, #8]
}
 8004ba6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ba8:	bf00      	nop
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0fc      	beq.n	8004baa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bc0:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <pxCurrentTCBConst2>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bca:	f380 8809 	msr	PSP, r0
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bde:	4770      	bx	lr

08004be0 <pxCurrentTCBConst2>:
 8004be0:	2000084c 	.word	0x2000084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004be8:	4806      	ldr	r0, [pc, #24]	@ (8004c04 <prvPortStartFirstTask+0x1c>)
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f380 8808 	msr	MSP, r0
 8004bf2:	b662      	cpsie	i
 8004bf4:	b661      	cpsie	f
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	df00      	svc	0
 8004c00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c02:	bf00      	nop
 8004c04:	e000ed08 	.word	0xe000ed08

08004c08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c0e:	4b32      	ldr	r3, [pc, #200]	@ (8004cd8 <xPortStartScheduler+0xd0>)
 8004c10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	22ff      	movs	r2, #255	@ 0xff
 8004c1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	4b2a      	ldr	r3, [pc, #168]	@ (8004cdc <xPortStartScheduler+0xd4>)
 8004c34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c36:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c38:	2207      	movs	r2, #7
 8004c3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c3c:	e009      	b.n	8004c52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c3e:	4b28      	ldr	r3, [pc, #160]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	4a26      	ldr	r2, [pc, #152]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d0ef      	beq.n	8004c3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d00b      	beq.n	8004c82 <xPortStartScheduler+0x7a>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60bb      	str	r3, [r7, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c82:	4b17      	ldr	r3, [pc, #92]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c94:	4a12      	ldr	r2, [pc, #72]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ca0:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <xPortStartScheduler+0xdc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce4 <xPortStartScheduler+0xdc>)
 8004ca6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004caa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <xPortStartScheduler+0xdc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <xPortStartScheduler+0xdc>)
 8004cb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cb8:	f000 f8b8 	bl	8004e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <xPortStartScheduler+0xe0>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cc2:	f7ff ff91 	bl	8004be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cc6:	f7ff f879 	bl	8003dbc <vTaskSwitchContext>
	prvTaskExitError();
 8004cca:	f7ff ff4d 	bl	8004b68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	e000e400 	.word	0xe000e400
 8004cdc:	20000e78 	.word	0x20000e78
 8004ce0:	20000e7c 	.word	0x20000e7c
 8004ce4:	e000ed20 	.word	0xe000ed20
 8004ce8:	2000000c 	.word	0x2000000c

08004cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	607b      	str	r3, [r7, #4]
}
 8004d04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d06:	4b0f      	ldr	r3, [pc, #60]	@ (8004d44 <vPortEnterCritical+0x58>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d44 <vPortEnterCritical+0x58>)
 8004d0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d10:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <vPortEnterCritical+0x58>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d110      	bne.n	8004d3a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d18:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <vPortEnterCritical+0x5c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <vPortEnterCritical+0x4e>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	603b      	str	r3, [r7, #0]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vPortEnterCritical+0x4a>
	}
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr
 8004d44:	2000000c 	.word	0x2000000c
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d52:	4b12      	ldr	r3, [pc, #72]	@ (8004d9c <vPortExitCritical+0x50>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10b      	bne.n	8004d72 <vPortExitCritical+0x26>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	607b      	str	r3, [r7, #4]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d72:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <vPortExitCritical+0x50>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <vPortExitCritical+0x50>)
 8004d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d7c:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <vPortExitCritical+0x50>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <vPortExitCritical+0x44>
 8004d84:	2300      	movs	r3, #0
 8004d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f383 8811 	msr	BASEPRI, r3
}
 8004d8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	2000000c 	.word	0x2000000c

08004da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004da0:	f3ef 8009 	mrs	r0, PSP
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <pxCurrentTCBConst>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004db0:	6010      	str	r0, [r2, #0]
 8004db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004db6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004dba:	f380 8811 	msr	BASEPRI, r0
 8004dbe:	f7fe fffd 	bl	8003dbc <vTaskSwitchContext>
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	6808      	ldr	r0, [r1, #0]
 8004dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dd6:	f380 8809 	msr	PSP, r0
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	4770      	bx	lr

08004de0 <pxCurrentTCBConst>:
 8004de0:	2000084c 	.word	0x2000084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop

08004de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e02:	f7fe ff21 	bl	8003c48 <xTaskIncrementTick>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <xPortSysTickHandler+0x40>)
 8004e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f383 8811 	msr	BASEPRI, r3
}
 8004e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e30:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <vPortSetupTimerInterrupt+0x30>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e36:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <vPortSetupTimerInterrupt+0x34>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e3c:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <vPortSetupTimerInterrupt+0x38>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a09      	ldr	r2, [pc, #36]	@ (8004e68 <vPortSetupTimerInterrupt+0x3c>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	4a08      	ldr	r2, [pc, #32]	@ (8004e6c <vPortSetupTimerInterrupt+0x40>)
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e4e:	4b03      	ldr	r3, [pc, #12]	@ (8004e5c <vPortSetupTimerInterrupt+0x30>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	e000e010 	.word	0xe000e010
 8004e60:	e000e018 	.word	0xe000e018
 8004e64:	20000000 	.word	0x20000000
 8004e68:	10624dd3 	.word	0x10624dd3
 8004e6c:	e000e014 	.word	0xe000e014

08004e70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e76:	f3ef 8305 	mrs	r3, IPSR
 8004e7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	d915      	bls.n	8004eae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e82:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <vPortValidateInterruptPriority+0x70>)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e8c:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <vPortValidateInterruptPriority+0x74>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	7afa      	ldrb	r2, [r7, #11]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d20b      	bcs.n	8004eae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	607b      	str	r3, [r7, #4]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004eae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee8 <vPortValidateInterruptPriority+0x78>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <vPortValidateInterruptPriority+0x7c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d90b      	bls.n	8004ed6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	603b      	str	r3, [r7, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <vPortValidateInterruptPriority+0x62>
	}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr
 8004ee0:	e000e3f0 	.word	0xe000e3f0
 8004ee4:	20000e78 	.word	0x20000e78
 8004ee8:	e000ed0c 	.word	0xe000ed0c
 8004eec:	20000e7c 	.word	0x20000e7c

08004ef0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004efc:	f7fe fdea 	bl	8003ad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f00:	4b5c      	ldr	r3, [pc, #368]	@ (8005074 <pvPortMalloc+0x184>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f08:	f000 f924 	bl	8005154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8005078 <pvPortMalloc+0x188>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 8095 	bne.w	8005044 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01e      	beq.n	8004f5e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f20:	2208      	movs	r2, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d015      	beq.n	8004f5e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f023 0307 	bic.w	r3, r3, #7
 8004f38:	3308      	adds	r3, #8
 8004f3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <pvPortMalloc+0x6e>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d06f      	beq.n	8005044 <pvPortMalloc+0x154>
 8004f64:	4b45      	ldr	r3, [pc, #276]	@ (800507c <pvPortMalloc+0x18c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d86a      	bhi.n	8005044 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f6e:	4b44      	ldr	r3, [pc, #272]	@ (8005080 <pvPortMalloc+0x190>)
 8004f70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f72:	4b43      	ldr	r3, [pc, #268]	@ (8005080 <pvPortMalloc+0x190>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f78:	e004      	b.n	8004f84 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d903      	bls.n	8004f96 <pvPortMalloc+0xa6>
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f1      	bne.n	8004f7a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f96:	4b37      	ldr	r3, [pc, #220]	@ (8005074 <pvPortMalloc+0x184>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d051      	beq.n	8005044 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	4413      	add	r3, r2
 8004fa8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	2308      	movs	r3, #8
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d920      	bls.n	8005004 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <pvPortMalloc+0xfc>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	613b      	str	r3, [r7, #16]
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	e7fd      	b.n	8004fe8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ffe:	69b8      	ldr	r0, [r7, #24]
 8005000:	f000 f90a 	bl	8005218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005004:	4b1d      	ldr	r3, [pc, #116]	@ (800507c <pvPortMalloc+0x18c>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	4a1b      	ldr	r2, [pc, #108]	@ (800507c <pvPortMalloc+0x18c>)
 8005010:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005012:	4b1a      	ldr	r3, [pc, #104]	@ (800507c <pvPortMalloc+0x18c>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <pvPortMalloc+0x194>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d203      	bcs.n	8005026 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800501e:	4b17      	ldr	r3, [pc, #92]	@ (800507c <pvPortMalloc+0x18c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a18      	ldr	r2, [pc, #96]	@ (8005084 <pvPortMalloc+0x194>)
 8005024:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <pvPortMalloc+0x188>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	431a      	orrs	r2, r3
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800503a:	4b13      	ldr	r3, [pc, #76]	@ (8005088 <pvPortMalloc+0x198>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	4a11      	ldr	r2, [pc, #68]	@ (8005088 <pvPortMalloc+0x198>)
 8005042:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005044:	f7fe fd54 	bl	8003af0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <pvPortMalloc+0x17a>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	60fb      	str	r3, [r7, #12]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <pvPortMalloc+0x176>
	return pvReturn;
 800506a:	69fb      	ldr	r3, [r7, #28]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	@ 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20001a88 	.word	0x20001a88
 8005078:	20001a9c 	.word	0x20001a9c
 800507c:	20001a8c 	.word	0x20001a8c
 8005080:	20001a80 	.word	0x20001a80
 8005084:	20001a90 	.word	0x20001a90
 8005088:	20001a94 	.word	0x20001a94

0800508c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04f      	beq.n	800513e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800509e:	2308      	movs	r3, #8
 80050a0:	425b      	negs	r3, r3
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4413      	add	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4b25      	ldr	r3, [pc, #148]	@ (8005148 <vPortFree+0xbc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <vPortFree+0x46>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60fb      	str	r3, [r7, #12]
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	e7fd      	b.n	80050ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <vPortFree+0x66>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	60bb      	str	r3, [r7, #8]
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	4b14      	ldr	r3, [pc, #80]	@ (8005148 <vPortFree+0xbc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01e      	beq.n	800513e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d11a      	bne.n	800513e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <vPortFree+0xbc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005118:	f7fe fcdc 	bl	8003ad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <vPortFree+0xc0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4413      	add	r3, r2
 8005126:	4a09      	ldr	r2, [pc, #36]	@ (800514c <vPortFree+0xc0>)
 8005128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800512a:	6938      	ldr	r0, [r7, #16]
 800512c:	f000 f874 	bl	8005218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005130:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <vPortFree+0xc4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3301      	adds	r3, #1
 8005136:	4a06      	ldr	r2, [pc, #24]	@ (8005150 <vPortFree+0xc4>)
 8005138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800513a:	f7fe fcd9 	bl	8003af0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20001a9c 	.word	0x20001a9c
 800514c:	20001a8c 	.word	0x20001a8c
 8005150:	20001a98 	.word	0x20001a98

08005154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800515a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800515e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005160:	4b27      	ldr	r3, [pc, #156]	@ (8005200 <prvHeapInit+0xac>)
 8005162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3307      	adds	r3, #7
 8005172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	4a1f      	ldr	r2, [pc, #124]	@ (8005200 <prvHeapInit+0xac>)
 8005184:	4413      	add	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800518c:	4a1d      	ldr	r2, [pc, #116]	@ (8005204 <prvHeapInit+0xb0>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005192:	4b1c      	ldr	r3, [pc, #112]	@ (8005204 <prvHeapInit+0xb0>)
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051a0:	2208      	movs	r2, #8
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a15      	ldr	r2, [pc, #84]	@ (8005208 <prvHeapInit+0xb4>)
 80051b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051b6:	4b14      	ldr	r3, [pc, #80]	@ (8005208 <prvHeapInit+0xb4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051be:	4b12      	ldr	r3, [pc, #72]	@ (8005208 <prvHeapInit+0xb4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005208 <prvHeapInit+0xb4>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <prvHeapInit+0xb8>)
 80051e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a09      	ldr	r2, [pc, #36]	@ (8005210 <prvHeapInit+0xbc>)
 80051ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051ec:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <prvHeapInit+0xc0>)
 80051ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000e80 	.word	0x20000e80
 8005204:	20001a80 	.word	0x20001a80
 8005208:	20001a88 	.word	0x20001a88
 800520c:	20001a90 	.word	0x20001a90
 8005210:	20001a8c 	.word	0x20001a8c
 8005214:	20001a9c 	.word	0x20001a9c

08005218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005220:	4b27      	ldr	r3, [pc, #156]	@ (80052c0 <prvInsertBlockIntoFreeList+0xa8>)
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e002      	b.n	800522c <prvInsertBlockIntoFreeList+0x14>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d8f7      	bhi.n	8005226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d108      	bne.n	800525a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d118      	bne.n	80052a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <prvInsertBlockIntoFreeList+0xac>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d00d      	beq.n	8005296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e008      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005296:	4b0b      	ldr	r3, [pc, #44]	@ (80052c4 <prvInsertBlockIntoFreeList+0xac>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e003      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d002      	beq.n	80052b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	20001a80 	.word	0x20001a80
 80052c4:	20001a88 	.word	0x20001a88

080052c8 <memset>:
 80052c8:	4603      	mov	r3, r0
 80052ca:	4402      	add	r2, r0
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d100      	bne.n	80052d2 <memset+0xa>
 80052d0:	4770      	bx	lr
 80052d2:	f803 1b01 	strb.w	r1, [r3], #1
 80052d6:	e7f9      	b.n	80052cc <memset+0x4>

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	2600      	movs	r6, #0
 80052dc:	4d0c      	ldr	r5, [pc, #48]	@ (8005310 <__libc_init_array+0x38>)
 80052de:	4c0d      	ldr	r4, [pc, #52]	@ (8005314 <__libc_init_array+0x3c>)
 80052e0:	1b64      	subs	r4, r4, r5
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	f000 f828 	bl	800533c <_init>
 80052ec:	2600      	movs	r6, #0
 80052ee:	4d0a      	ldr	r5, [pc, #40]	@ (8005318 <__libc_init_array+0x40>)
 80052f0:	4c0a      	ldr	r4, [pc, #40]	@ (800531c <__libc_init_array+0x44>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	080053c8 	.word	0x080053c8
 8005314:	080053c8 	.word	0x080053c8
 8005318:	080053c8 	.word	0x080053c8
 800531c:	080053cc 	.word	0x080053cc

08005320 <memcpy>:
 8005320:	440a      	add	r2, r1
 8005322:	4291      	cmp	r1, r2
 8005324:	f100 33ff 	add.w	r3, r0, #4294967295
 8005328:	d100      	bne.n	800532c <memcpy+0xc>
 800532a:	4770      	bx	lr
 800532c:	b510      	push	{r4, lr}
 800532e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005332:	4291      	cmp	r1, r2
 8005334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005338:	d1f9      	bne.n	800532e <memcpy+0xe>
 800533a:	bd10      	pop	{r4, pc}

0800533c <_init>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr

08005348 <_fini>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr
